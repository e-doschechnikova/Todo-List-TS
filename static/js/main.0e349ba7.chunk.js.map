{"version":3,"sources":["components/Error/Error404.module.css","serviceWorker.ts","api/todolist-api.ts","app/app-reducer.ts","utils/error-utils.ts","features/TodolistsList/Todolist/todolists-reducer.ts","features/TodolistsList/Todolist/Task/tasks-reducer.ts","features/Login/auth-reducer.ts","api/store.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","components/Error/Error404.tsx","app/App.tsx","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","ResultCode","ROUTS","instance","axios","create","baseURL","withCredentials","headers","todolistAPI","get","title","post","todoListId","delete","put","todolistID","taskID","model","authAPI","data","slice","createSlice","name","initialState","isInitialized","status","error","reducers","setAppStatusAC","state","action","payload","setAppErrorAC","setIsInitializedAppAC","value","appReducer","reducer","actions","handleServerAppError","dispatch","messages","length","handleServerNetWorkError","message","removeTodoListAC","index","findIndex","tl","id","splice","addTodoListAC","unshift","todolist","filter","entityStatus","changeTodoListTitleAC","changeTodoListFilterAC","changeTodolistEntityStatusAC","setTodolistsAC","todolists","map","extraReducers","todolistsReducer","removeTaskAC","tasks","t","addTaskAC","task","updateTaskAC","setTaskAC","bulder","addCase","forEach","tasksReducer","updateTaskTC","getState","find","apiModel","deadline","startDate","description","priority","then","res","resultCode","catch","finally","isLoggedIn","setIsLoggedInAC","authReducer","rootReducer","combineReducers","app","auth","store","configureStore","middleware","getDefaultMiddleware","prepend","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","AddItemForm","memo","addItem","disabled","React","useState","setTitle","setError","onClickAddItem","trimmedTitle","trim","TextField","variant","size","onChange","e","currentTarget","onKeyDown","key","label","helperText","IconButton","color","AddOutlined","onClick","EditableSpan","changeTitle","text","setText","editMode","setEditMode","offEditMode","onBlur","autoFocus","onDoubleClick","Task","removeTask","changeTaskStatus","changeTaskTitle","onClickHandler","useCallback","onChangeHandler","newIsDoneValue","checked","Completed","New","onTitleChangeHandler","newValue","ListItem","className","alignItems","disableGutters","divider","Checkbox","DeleteOutlineOutlined","TodoList","props","useEffect","items","tasksForTodolist","createOnClickHandler","changeTodoListFilter","addTask","taskJSX","todolistTitle","changeTodoListTitle","removeTodolist","List","style","listStyle","Button","margin","TodolistsList","a","err","isAxiosError","response","removeTaskTC","taskTitle","OK","item","addTaskTC","changeTodoListTitleTC","removeTodolistTC","addTodolist","addTodolistTC","todolistsComponents","allTodolistTask","Grid","Paper","padding","container","spacing","to","LOGIN","Alert","ref","elevation","ErrorSnackbar","handleClose","event","reason","Stack","sx","width","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","initialValues","email","password","rememberMe","captcha","validate","values","errors","test","onSubmit","resetForm","DEFAULT","justifyContent","handleSubmit","FormControl","FormLabel","href","target","FormGroup","getFieldProps","touched","type","FormControlLabel","control","Error404","styles","App","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","path","element","top","textAlign","CircularProgress","theme","createTheme","palette","primary","indigo","secondary","pink","ReactDOM","render","ThemeProvider","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.0e349ba7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"Error404_error__3j-Z2\"};","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won\"t work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let\"s check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It\"s the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can\"t reload the page.\r\n  fetch(swUrl, {\r\n    headers: { \"Service-Worker\": \"script\" }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import axios, {AxiosResponse} from \"axios\"\r\nimport {LoginDataType} from \"../features/Login/Login\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.1/\",\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": \"9c1a69da-f1af-40a7-806f-4d3b095c12b8\",\r\n    }\r\n})\r\n\r\n///----------- api -----------\\\\\\\r\nexport const todolistAPI = {\r\n    getTodolist() {\r\n        return instance.get<TodoListType[]>(\"todo-lists\")\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<ResponseType<{ item: TodoListType }>>(\"todo-lists\", {title: title})\r\n    },\r\n    deleteTodolist(todoListId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todoListId}`)\r\n    },\r\n    updateTodolist(todoListId: string, title: string) {\r\n        return instance.put<ResponseType<{ title: string }>>(\r\n            `todo-lists/${todoListId}`,\r\n            {title: title})\r\n    },\r\n    getTasks(todolistID: string) {\r\n        return instance.get<GetTasksResponse>(\r\n            `todo-lists/${todolistID}/tasks`)\r\n    },\r\n    createTasks(todolistID: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistID}/tasks`, {title});\r\n    },\r\n    deleteTasks(taskID: string, todolistID: string) {\r\n        return instance.delete<ResponseType>(\r\n            `todo-lists/${todolistID}/tasks/${taskID}`)\r\n    },\r\n    updateTasks(todolistID: string, taskID: string, model: UpdateTasksModelType) {\r\n        return instance.put<ResponseType>(\r\n            `todo-lists/${todolistID}/tasks/${taskID}`, model)\r\n    }\r\n}\r\nexport const authAPI = {\r\n    login(data: LoginDataType) {\r\n        return instance.post<LoginDataType, AxiosResponse<ResponseType<{ userId: string }>>>(`auth/login`, data);\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<AuthMeResponseType>>(`auth/me`)\r\n    },\r\n    logOut() {\r\n        return instance.delete<ResponseType>(`auth/login`)\r\n    }\r\n}\r\n\r\n///----------- types -----------\\\\\\\r\nexport type ResponseType<T = {}> = {\r\n    resultCode: number,\r\n    messages: string[],\r\n    fieldsErrors: string[],\r\n    data: T\r\n}\r\nexport type TodoListType = {\r\n    id: string,\r\n    addedDate: string,\r\n    order: number,\r\n    title: string\r\n}\r\nexport type AuthMeResponseType = {\r\n    id: number,\r\n    email: string,\r\n    login: string\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport enum ResultCode {\r\n    OK = 0,\r\n    ERROR = 1,\r\n    CAPTCHA = 10\r\n}\r\n\r\nexport enum ROUTS {\r\n    DEFAULT = \"/\",\r\n    LOGIN = \"login\",\r\n    NOT_FOUND = \"404\"\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities,\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedData: string\r\n}\r\n\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\nexport type UpdateTasksModelType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\n","import {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n    isInitialized: false,\r\n    status: \"loading\" as RequestStatusType,\r\n    error: null as null | string\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: \"app\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        setAppStatusAC: (state, action: PayloadAction<{ status: RequestStatusType }>) => {\r\n            state.status = action.payload.status\r\n        },\r\n        setAppErrorAC: (state, action: PayloadAction<{ error: string | null }>) => {\r\n            state.error = action.payload.error\r\n        },\r\n        setIsInitializedAppAC: (state, action: PayloadAction<{ value: boolean }>) => {\r\n            state.isInitialized = action.payload.value\r\n        }\r\n    }\r\n})\r\n\r\nexport const appReducer = slice.reducer\r\n\r\nexport const {setAppStatusAC, setAppErrorAC, setIsInitializedAppAC} = slice.actions//(status: RequestStatusType) => ({type: \"APP/SET-STATUS\", status} as const)\r\n\r\n///----------- type -----------\\\\\\\r\nexport type RequestStatusType = \"idle\" | \"loading\" | \"succeeded\" | \"failed\"\r\nexport type SetAppStatusType = ReturnType<typeof setAppStatusAC>\r\nexport type SetAppErrorType = ReturnType<typeof setAppErrorAC>\r\n\r\n","import {setAppErrorAC, SetAppErrorType, setAppStatusAC, SetAppStatusType} from \"../app/app-reducer\"\r\nimport {Dispatch} from \"redux\"\r\nimport {ResponseType} from \"../api/todolist-api\";\r\n\r\n\r\n///----------- generic function -----------\\\\\\\r\nexport const handleServerAppError = <T>(dispatch: ErrorUtilsDispatchType, data: ResponseType<T>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC({error: data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppErrorAC({error: \"Some error occurred\"}))\r\n    }\r\n    dispatch(setAppStatusAC({status: \"failed\"}))\r\n}\r\n\r\nexport const handleServerNetWorkError = (dispatch: ErrorUtilsDispatchType, error: { message: string }) => {\r\n    dispatch(setAppErrorAC({error: error.message ? error.message : \"Some error occurred\"}))\r\n    dispatch(setAppStatusAC({status: \"failed\"}))\r\n}\r\n\r\n///----------- types -----------\\\\\\}\r\ntype ErrorUtilsDispatchType = Dispatch<SetAppStatusType | SetAppErrorType>","import {todolistAPI, TodoListType} from \"../../../api/todolist-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {RequestStatusType, setAppStatusAC,} from \"../../../app/app-reducer\";\r\nimport {AxiosError} from \"axios\";\r\nimport {handleServerAppError, handleServerNetWorkError} from \"../../../utils/error-utils\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: Array<TodoListDomainType> = []\r\n\r\nexport const slice = createSlice({\r\n    name: \"todolists\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        removeTodoListAC(state, action: PayloadAction<{ id: string }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            if (index > -1) {\r\n                state.splice(index, 1)\r\n            }\r\n        },\r\n        addTodoListAC(state, action: PayloadAction<{ todolist: TodoListType }>) {\r\n            state.unshift({...action.payload.todolist, filter: \"all\", entityStatus: \"idle\"}, ...state)\r\n        },\r\n        changeTodoListTitleAC(state, action: PayloadAction<{ title: string, id: string }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].title = action.payload.title\r\n        },\r\n        changeTodoListFilterAC(state, action: PayloadAction<{ id: string, filter: FilterValuesType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].filter = action.payload.filter\r\n        },\r\n        changeTodolistEntityStatusAC(state, action: PayloadAction<{ id: string, status: RequestStatusType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].entityStatus = action.payload.status\r\n        },\r\n        setTodolistsAC(state, action: PayloadAction<{ todolists: Array<TodoListType> }>) {\r\n            return action.payload.todolists.map(tl => ({...tl, filter: \"all\", entityStatus: \"idle\"}))\r\n        }\r\n    },\r\n    extraReducers: {}\r\n})\r\nexport const todolistsReducer = slice.reducer\r\nexport const {\r\n    removeTodoListAC,\r\n    addTodoListAC,\r\n    changeTodoListTitleAC,\r\n    changeTodoListFilterAC,\r\n    setTodolistsAC,\r\n    changeTodolistEntityStatusAC\r\n} = slice.actions\r\n\r\n///----------- thunks creators -----------\\\\\\\r\nexport const fetchTodolistsTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: \"loading\"}))\r\n    todolistAPI.getTodolist()\r\n        .then((res) => {\r\n            dispatch(setTodolistsAC({todolists: res.data}))\r\n            dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n        })\r\n        .catch(() => {\r\n            dispatch(setAppStatusAC({status: \"failed\"}))\r\n        })\r\n}\r\nexport const removeTodolistTC = (todolistID: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: \"loading\"}))\r\n    dispatch(changeTodolistEntityStatusAC({id: todolistID, status: \"loading\"}))\r\n    todolistAPI.deleteTodolist(todolistID)\r\n        .then(() => {\r\n            dispatch(removeTodoListAC({id: todolistID}))\r\n            dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n        })\r\n        .catch((error: AxiosError) => {\r\n            dispatch(changeTodolistEntityStatusAC({id: todolistID, status: \"idle\"}))\r\n            handleServerNetWorkError(dispatch, error)\r\n        })\r\n        .finally(() => {\r\n            dispatch(setAppStatusAC({status: \"idle\"}))\r\n        })\r\n}\r\nexport const addTodolistTC = (title: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: \"loading\"}))\r\n    todolistAPI.createTodolist(title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(addTodoListAC({todolist: res.data.data.item}))\r\n            } else {\r\n                handleServerAppError(dispatch, res.data)\r\n            }\r\n        })\r\n        .catch((error: AxiosError) => {\r\n            handleServerNetWorkError(dispatch, error)\r\n        })\r\n}\r\nexport const changeTodoListTitleTC = (title: string, id: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: \"loading\"}))\r\n    todolistAPI.updateTodolist(id, title).then(() => {\r\n        dispatch(changeTodoListTitleAC({title: title, id: id}))\r\n        dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n    })\r\n}\r\n\r\n///----------- types -----------\\\\\\\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodoListDomainType = TodoListType & {\r\n    filter: FilterValuesType,\r\n    entityStatus: RequestStatusType\r\n}","import {addTodoListAC, removeTodoListAC, setTodolistsAC} from \"../todolists-reducer\";\r\nimport {TaskType, ResultCode, todolistAPI, UpdateTasksModelType} from \"../../../../api/todolist-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"../../../../api/store\";\r\nimport {setAppErrorAC, setAppStatusAC} from \"../../../../app/app-reducer\";\r\nimport axios, {AxiosError} from \"axios\";\r\nimport {handleServerAppError, handleServerNetWorkError} from \"../../../../utils/error-utils\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: TaskStateType = {}\r\n\r\nconst slice = createSlice({\r\n    name: 'tasks',\r\n    initialState,\r\n    reducers: {\r\n        removeTaskAC(state, action: PayloadAction<{ taskID: string, todolistID: string }>) {\r\n            const tasks = state[action.payload.todolistID]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskID)\r\n            if (index > -1) {\r\n                tasks.splice(index, 1)\r\n            }\r\n        },\r\n        addTaskAC(state, action: PayloadAction<{ task: TaskType }>) {\r\n            state[action.payload.task.todoListId].unshift(action.payload.task)\r\n        },\r\n        updateTaskAC(state, action: PayloadAction<{ taskID: string, model: UpdateDomainTasksModelType, todolistID: string }>) {\r\n            const tasks = state[action.payload.todolistID]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskID)\r\n            if (index > -1) {\r\n                tasks[index] = {...tasks[index], ...action.payload.model}\r\n            }\r\n        },\r\n        setTaskAC(state, action: PayloadAction<{ tasks: TaskType[], todolistID: string }>) {\r\n            state[action.payload.todolistID] = action.payload.tasks\r\n        },\r\n    },\r\n    extraReducers: (bulder) => {\r\n        bulder.addCase(addTodoListAC, (state, action) => {\r\n            state[action.payload.todolist.id] = []\r\n        });\r\n        bulder.addCase(removeTodoListAC, (state, action) => {\r\n            delete state[action.payload.id]\r\n        });\r\n        bulder.addCase(setTodolistsAC, (state, action) => {\r\n            action.payload.todolists.forEach((tl: any) => {\r\n                state[tl.id] = []\r\n            });\r\n        });\r\n    }\r\n})\r\n\r\nexport const tasksReducer = slice.reducer\r\n\r\nexport const {removeTaskAC, addTaskAC, updateTaskAC, setTaskAC} = slice.actions\r\n\r\n///----------- thunks creators -----------\\\\\\\r\nexport const fetchTasksTC = (todolistID: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: \"loading\"}))\r\n    todolistAPI.getTasks(todolistID)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTaskAC({tasks, todolistID}))\r\n            dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskID: string, todolistID: string) => async (dispatch: Dispatch) => {\r\n    try {\r\n        dispatch(setAppStatusAC({status: \"loading\"}))\r\n        await todolistAPI.deleteTasks(taskID, todolistID)\r\n        dispatch(removeTaskAC({taskID, todolistID}))\r\n        dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n    } catch (e) {\r\n        const err = e as Error | AxiosError\r\n        if (axios.isAxiosError(err)) {\r\n            const error = err.response?.data\r\n                ? (err.response.data as (_Error)).error\r\n                : err.message\r\n            dispatch(setAppErrorAC({error}))\r\n        }\r\n        dispatch(setAppStatusAC({status: \"failed\"}))\r\n    }\r\n}\r\nexport const addTaskTC = (taskTitle: string, todolistID: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: \"loading\"}))\r\n    todolistAPI.createTasks(todolistID, taskTitle)\r\n        .then((res) => {\r\n            if (res.data.resultCode === ResultCode.OK) {\r\n                dispatch(addTaskAC({task: res.data.data.item}))\r\n                dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n            } else {\r\n                handleServerAppError(dispatch, res.data)\r\n            }\r\n        })\r\n        .catch((error: AxiosError) => {\r\n            handleServerNetWorkError(dispatch, error)\r\n        })\r\n        .finally(() => {\r\n            dispatch(setAppStatusAC({status: \"idle\"}))\r\n        })\r\n}\r\nexport const updateTaskTC = (taskID: string, todolistID: string, model: UpdateDomainTasksModelType) => (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n    const task = getState().tasks[todolistID].find((t) => t.id === taskID)\r\n    if (task) {\r\n        const apiModel: UpdateTasksModelType = {\r\n            title: task.title,\r\n            deadline: task.deadline,\r\n            startDate: task.startDate,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            status: task.status,\r\n            ...model\r\n\r\n        }\r\n\r\n        dispatch(setAppStatusAC({status: \"loading\"}))\r\n        todolistAPI.updateTasks(todolistID, taskID, apiModel)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(updateTaskAC({taskID, model, todolistID}))\r\n                    dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n                } else {\r\n                    handleServerAppError(dispatch, res.data)\r\n                }\r\n\r\n            })\r\n            .catch((error: AxiosError) => {\r\n                handleServerNetWorkError(dispatch, error)\r\n            })\r\n            .finally(() => {\r\n                dispatch(setAppStatusAC({status: \"idle\"}))\r\n            })\r\n    }\r\n}\r\n\r\n///----------- types -----------\\\\\\\r\nexport type TaskStateType = {\r\n    [todolistID: string]: Array<TaskType>;\r\n};\r\n\r\nexport type UpdateDomainTasksModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: number\r\n    priority?: number\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n\r\ntype _Error = {\r\n    error: string\r\n}","import {Dispatch} from \"redux\"\r\nimport {setAppStatusAC, setIsInitializedAppAC} from '../../app/app-reducer'\r\nimport {LoginDataType} from \"./Login\";\r\nimport {authAPI, ResultCode} from \"../../api/todolist-api\";\r\nimport {handleServerAppError, handleServerNetWorkError} from \"../../utils/error-utils\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: \"auth\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        setIsLoggedInAC(state, action: PayloadAction<{ value: boolean }>) {\r\n            state.isLoggedIn = action.payload.value\r\n        }\r\n    }\r\n})\r\n\r\n\r\nexport const authReducer = slice.reducer\r\nexport const {setIsLoggedInAC} = slice.actions\r\n\r\n///----------- thunks creators -----------\\\\\\\r\nexport const loginTC = (data: LoginDataType) => async (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: \"loading\"}))\r\n    try {\r\n        const response = await authAPI.login(data)\r\n        if (response.data.resultCode === ResultCode.OK) {\r\n            dispatch(setIsLoggedInAC({value: true}))\r\n            dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n        } else {\r\n            handleServerAppError(dispatch, response.data)\r\n        }\r\n    } catch (e) {\r\n        handleServerNetWorkError(dispatch, e as { message: string })\r\n    }\r\n}\r\nexport const initializeAppTC = () => async (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: \"loading\"}))\r\n    try {\r\n        const response = await authAPI.me()\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC({value: true}));\r\n            dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n        } else {\r\n            handleServerAppError(dispatch, response.data)\r\n        }\r\n    } catch (e) {\r\n        handleServerNetWorkError(dispatch, e as { message: string })\r\n    } finally {\r\n        dispatch(setIsInitializedAppAC({value: true}));\r\n    }\r\n\r\n}\r\nexport const logOutTC = () => async (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: \"loading\"}))\r\n    try {\r\n        const response = await authAPI.logOut()\r\n        if (response.data.resultCode === ResultCode.OK) {\r\n            dispatch(setIsLoggedInAC({value: false}));\r\n            dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n        } else {\r\n            handleServerAppError(dispatch, response.data)\r\n        }\r\n    } catch (e) {\r\n        handleServerNetWorkError(dispatch, e as { message: string })\r\n    }\r\n\r\n}\r\n","import {tasksReducer} from \"../features/TodolistsList/Todolist/Task/tasks-reducer\";\r\nimport {todolistsReducer} from \"../features/TodolistsList/Todolist/todolists-reducer\";\r\nimport {AnyAction, combineReducers} from \"redux\";\r\nimport thunk, {ThunkDispatch} from \"redux-thunk\"\r\nimport {TypedUseSelectorHook, useDispatch, useSelector} from \"react-redux\";\r\nimport {appReducer} from \"../app/app-reducer\";\r\nimport {authReducer} from \"../features/Login/auth-reducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunk)\r\n})\r\nexport const useAppDispatch = () => useDispatch<AppDispatchType>()\r\nexport const useAppSelector: TypedUseSelectorHook<AppRootStateType> = useSelector\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\n///----------- types -----------\\\\\\\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\ntype AppDispatchType = ThunkDispatch<AppRootStateType, void, AnyAction>\r\n\r\n","import {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddOutlined} from \"@material-ui/icons\";\r\nimport React, {ChangeEvent, KeyboardEvent, memo, useState} from \"react\";\r\n\r\nexport const AddItemForm = memo(({addItem, disabled}: AddItemFormPropsType) => {\r\n\r\n    const [title, setTitle] = React.useState<string>(\"\");\r\n    const [error, setError] = useState<boolean>(false);\r\n\r\n    const onChangeSetTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value);\r\n        error && setError(false);\r\n    };\r\n    const onKeyDownAddItem = (e: KeyboardEvent<HTMLInputElement>) =>\r\n        e.key === \"Enter\" && onClickAddItem();\r\n    const onClickAddItem = () => {\r\n        const trimmedTitle = title.trim();\r\n        if (trimmedTitle) {\r\n            addItem(trimmedTitle);\r\n        } else {\r\n            setError(true);\r\n        }\r\n        setTitle(\"\");\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                variant={\"outlined\"}\r\n                size={\"small\"}\r\n                value={title}\r\n                onChange={onChangeSetTitle}\r\n                onKeyDown={onKeyDownAddItem}\r\n                label={\"Add title\"}\r\n                error={error}\r\n                helperText={error && \"Title is required!\"}\r\n                disabled={disabled}\r\n            />\r\n            <IconButton color={\"secondary\"} disabled={disabled}>\r\n                <AddOutlined onClick={onClickAddItem}/>\r\n            </IconButton>\r\n        </div>\r\n    );\r\n});\r\n\r\n///----------- type -----------\\\\\\\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void;\r\n    disabled?: boolean\r\n};","import {TextField} from \"@material-ui/core\";\r\nimport React, {ChangeEvent, useState, KeyboardEvent, memo} from \"react\";\r\n\r\nexport const EditableSpan = memo(({title, changeTitle}: EditableSpanPropsType) => {\r\n\r\n    const [text, setText] = React.useState<string>(title);\r\n    const [editMode, setEditMode] = useState<boolean>(false);\r\n\r\n    const onChangeSetText = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setText(e.currentTarget.value);\r\n    };\r\n    const onKeyDownChangeTitle = (e: KeyboardEvent<HTMLInputElement>) =>\r\n        e.key === \"Enter\" && offEditMode();\r\n    const onEditMode = () => {\r\n        setEditMode(true);\r\n    };\r\n    const offEditMode = () => {\r\n        setEditMode(false);\r\n        changeTitle(text);\r\n    };\r\n\r\n    return editMode ? (\r\n        <TextField\r\n            color={\"primary\"}\r\n            value={text}\r\n            onChange={onChangeSetText}\r\n            onKeyDown={onKeyDownChangeTitle}\r\n            onBlur={offEditMode}\r\n            autoFocus\r\n        />\r\n    ) : (\r\n        <span onDoubleClick={onEditMode}>{title}</span>\r\n    );\r\n});\r\n\r\n///----------- type -----------\\\\\\\r\ntype EditableSpanPropsType = {\r\n    title: string;\r\n    changeTitle: (editedTitle: string) => void;\r\n};","import React, {ChangeEvent, memo, useCallback} from \"react\";\r\nimport {Checkbox, IconButton, ListItem} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"../../../../components/EditableSpan/EditableSpan\";\r\nimport {DeleteOutlineOutlined} from \"@material-ui/icons\";\r\nimport {TaskStatuses, TaskType} from \"../../../../api/todolist-api\";\r\n\r\nexport const Task = memo(({task, todolistID, removeTask, changeTaskStatus, changeTaskTitle}: TaskPropsType) => {\r\n\r\n    const {id, status, title} = {...task}\r\n\r\n    const onClickHandler = useCallback(() => removeTask(task.id, todolistID), [task.id, todolistID, removeTask])\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        changeTaskStatus(id, todolistID, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New,)\r\n    }, [id, todolistID, changeTaskStatus])\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        changeTaskTitle(id, newValue, todolistID)\r\n    }, [id, todolistID, changeTaskTitle])\r\n\r\n    return (\r\n        <ListItem\r\n            key={id}\r\n            className={status === TaskStatuses.Completed ? \"task isDone\" : \"\"}\r\n            alignItems={\"center\"}\r\n            disableGutters={true}\r\n            divider={true}\r\n        >\r\n            <Checkbox\r\n                size={\"small\"}\r\n                color={\"primary\"}\r\n                onChange={onChangeHandler}\r\n                checked={status === TaskStatuses.Completed}\r\n            />\r\n            <EditableSpan title={title} changeTitle={onTitleChangeHandler}/>\r\n            <IconButton>\r\n                <DeleteOutlineOutlined onClick={onClickHandler}/>\r\n            </IconButton>\r\n        </ListItem>\r\n    );\r\n});\r\n\r\n///----------- type -----------\\\\\\\r\nexport type TaskPropsType = {\r\n    task: TaskType,\r\n    todolistID: string,\r\n    removeTask: (taskID: string, todolistID: string) => void;\r\n    changeTaskTitle: (taskTitle: string, title: string, todolistID: string) => void;\r\n    changeTaskStatus: (taskID: string, todolistID: string, status: TaskStatuses) => void;\r\n}","import React, {memo, useCallback, useEffect} from \"react\";\r\nimport {AddItemForm} from \"../../../components/AddItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"../../../components/EditableSpan/EditableSpan\";\r\nimport {Button, IconButton, List} from \"@material-ui/core\";\r\nimport {DeleteOutlineOutlined} from \"@material-ui/icons\";\r\nimport {TaskStatuses, TaskType} from \"../../../api/todolist-api\";\r\nimport {FilterValuesType, TodoListDomainType} from \"./todolists-reducer\";\r\nimport {fetchTasksTC} from \"./Task/tasks-reducer\";\r\nimport {useAppDispatch} from \"../../../api/store\";\r\nimport {Task} from \"./Task/Task\";\r\nimport {RequestStatusType} from \"../../../app/app-reducer\";\r\n\r\nexport const TodoList = memo((props: TodoListPropsType) => {\r\n\r\n    const dispatch = useAppDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTasksTC(props.todolist.id))\r\n    }, [])\r\n\r\n    let tasksForTodolist = props.tasks;\r\n\r\n    if (props.todolist.filter === \"active\") {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === \"completed\") {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    const createOnClickHandler = (filter: FilterValuesType) => {\r\n        return () => props.changeTodoListFilter(filter, props.todolist.id);\r\n    };\r\n    const addTask = useCallback((title: string) => props.addTask(title, props.todolist.id), [props.addTask, props.todolist.id]);\r\n    const removeTodolist = () => props.removeTodolist(props.todolist.id);\r\n    const changeTodoListTitle = (todolistTitle: string) =>\r\n        props.changeTodoListTitle(todolistTitle, props.todolist.id);\r\n    const taskJSX = tasksForTodolist.length ?\r\n        tasksForTodolist.map(t => <Task key={t.id} task={t} todolistID={props.todolist.id} removeTask={props.removeTask}\r\n                                        changeTaskTitle={props.changeTaskTitle}\r\n                                        changeTaskStatus={props.changeTaskStatus}\r\n        />) : <span>I\"m empty! Fill me up! <b>㋡</b></span>\r\n    // console.log(\"->\", tasksForTodolist)\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditableSpan title={props.todolist.title} changeTitle={changeTodoListTitle}/>\r\n                <IconButton disabled={props.entityStatus === \"loading\"}>\r\n                    <DeleteOutlineOutlined color={\"primary\"} onClick={removeTodolist}/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addTask} disabled={props.entityStatus === \"loading\"}/>\r\n            <List style={{listStyle: \"none\"}}>\r\n                {taskJSX}\r\n            </List>\r\n            <div>\r\n                <Button\r\n                    size={\"small\"}\r\n                    variant={\"outlined\"}\r\n                    color={props.todolist.filter === \"all\" ? \"secondary\" : \"primary\"}\r\n                    onClick={createOnClickHandler(\"all\")}\r\n                    style={{margin: \"5px\"}}\r\n                >\r\n                    All\r\n                </Button>\r\n                <Button\r\n                    size={\"small\"}\r\n                    variant={\"outlined\"}\r\n                    color={props.todolist.filter === \"active\" ? \"secondary\" : \"primary\"}\r\n                    onClick={createOnClickHandler(\"active\")}\r\n                    style={{margin: \"5px\"}}\r\n                >\r\n                    Active\r\n                </Button>\r\n                <Button\r\n                    size={\"small\"}\r\n                    variant={\"outlined\"}\r\n                    color={props.todolist.filter === \"completed\" ? \"secondary\" : \"primary\"}\r\n                    onClick={createOnClickHandler(\"completed\")}\r\n                    style={{margin: \"5px\"}}\r\n                >\r\n                    Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n})\r\n\r\n///----------- type -----------\\\\\\\r\ntype TodoListPropsType = {\r\n    todolist: TodoListDomainType,\r\n    tasks: TaskType[];\r\n    addTask: (title: string, todolistID: string) => void;\r\n    removeTask: (taskID: string, todolistID: string) => void;\r\n    changeTaskTitle: (\r\n        taskTitle: string,\r\n        title: string,\r\n        todolistID: string\r\n    ) => void;\r\n    changeTaskStatus: (\r\n        taskID: string,\r\n        todolistID: string,\r\n        status: TaskStatuses\r\n    ) => void;\r\n    changeTodoListFilter: (filter: FilterValuesType, todolistID: string) => void;\r\n    changeTodoListTitle: (title: string, todolistID: string) => void;\r\n    removeTodolist: (todolistID: string) => void;\r\n    entityStatus: RequestStatusType\r\n};","import React, {useCallback, useEffect} from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {\r\n    addTodolistTC,\r\n    changeTodoListFilterAC,\r\n    changeTodoListTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodoListDomainType\r\n} from \"./Todolist/todolists-reducer\";\r\nimport {AppRootStateType, useAppDispatch} from \"../../api/store\";\r\nimport {addTaskTC, removeTaskTC, TaskStateType, updateTaskTC} from \"./Todolist/Task/tasks-reducer\";\r\nimport {ROUTS, TaskStatuses} from \"../../api/todolist-api\";\r\nimport {Grid, Paper} from \"@material-ui/core\";\r\nimport {TodoList} from \"./Todolist/Todolist\";\r\nimport {AddItemForm} from \"../../components/AddItemForm/AddItemForm\";\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\nexport const TodolistsList = () => {\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodoListDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TaskStateType>(state => state.tasks)\r\n    const dispatch = useAppDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    useEffect(() => {\r\n        if (!isLoggedIn) {\r\n            return\r\n        }\r\n        dispatch(fetchTodolistsTC())\r\n    }, [])\r\n\r\n    ///----------- tasks -----------\\\\\\\r\n    const removeTask = useCallback((taskID: string, todolistID: string) => {\r\n        dispatch(removeTaskTC(taskID, todolistID))\r\n    }, [dispatch]);\r\n    const addTask = useCallback((taskTitle: string, todolistID: string,) => {\r\n        dispatch(addTaskTC(taskTitle, todolistID))\r\n    }, [dispatch]);\r\n    const changeTaskStatus = useCallback((taskID: string, todolistID: string, status: TaskStatuses) => {\r\n        dispatch(updateTaskTC(taskID, todolistID, {status}))\r\n    }, [dispatch]);\r\n    const changeTaskTitle = useCallback((taskID: string, title: string, todolistID: string) => {\r\n        dispatch(updateTaskTC(taskID, todolistID, {title}))\r\n    }, [dispatch]);\r\n\r\n    ///----------- todolists -----------\\\\\\\r\n    const changeTodoListTitle = useCallback((title: string, todolistID: string) => {\r\n        let thunk = changeTodoListTitleTC(title, todolistID)\r\n        dispatch(thunk)\r\n    }, [dispatch]);\r\n    const changeTodoListFilter = useCallback((filter: FilterValuesType, todolistID: string) => {\r\n        dispatch(changeTodoListFilterAC({id: todolistID, filter: filter}))\r\n    }, [dispatch]);\r\n    const removeTodolist = useCallback((todolistID: string) => {\r\n        let thunk = removeTodolistTC(todolistID)\r\n        dispatch(thunk)\r\n    }, [dispatch]);\r\n    const addTodolist = useCallback((title: string) => {\r\n        let thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch]);\r\n\r\n    const todolistsComponents = todolists.map((tl) => {\r\n        let allTodolistTask = tasks[tl.id]\r\n        return (\r\n            <Grid item key={tl.id}>\r\n                <Paper variant={\"elevation\"} style={{padding: \"20px\"}}>\r\n                    <TodoList\r\n                        todolist={tl}\r\n                        tasks={allTodolistTask}\r\n                        entityStatus={tl.entityStatus}\r\n                        addTask={addTask}\r\n                        removeTask={removeTask}\r\n                        removeTodolist={removeTodolist}\r\n                        changeTaskStatus={changeTaskStatus}\r\n                        changeTodoListFilter={changeTodoListFilter}\r\n                        changeTaskTitle={changeTaskTitle}\r\n                        changeTodoListTitle={changeTodoListTitle}\r\n                    />\r\n                </Paper>\r\n            </Grid>\r\n        );\r\n    });\r\n\r\n    if (!isLoggedIn) {\r\n        return <Navigate to={ROUTS.LOGIN}/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Grid container style={{padding: \"20px 0\"}}>\r\n                <AddItemForm addItem={addTodolist}/>\r\n            </Grid>\r\n            <Grid container spacing={4}>\r\n                {todolistsComponents}\r\n            </Grid>\r\n        </>\r\n    )\r\n}","import * as React from 'react';\r\nimport Stack from '@mui/material/Stack';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@mui/material/Alert';\r\nimport {useAppSelector} from \"../../api/store\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {setAppErrorAC} from \"../../app/app-reducer\";\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props,\r\n    ref,\r\n) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"standard\" {...props} />;\r\n});\r\n\r\nexport default function ErrorSnackbar() {\r\n\r\n    const dispatch = useDispatch()\r\n    const error = useAppSelector<string | null>(state => state.app.error)\r\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC({error: null}))\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Stack spacing={2} sx={{width: '100%'}}>\r\n                <Snackbar open={!!error} autoHideDuration={6000} onClose={handleClose}>\r\n                    <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                        {error}😠\r\n                    </Alert>\r\n                </Snackbar>\r\n            </Stack></div>\r\n    );\r\n}\r\n","import React, {useEffect} from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {useFormik} from \"formik\";\r\nimport {AppRootStateType, useAppDispatch} from \"../../api/store\";\r\nimport {loginTC} from \"./auth-reducer\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {ROUTS} from \"../../api/todolist-api\";\r\nimport {setAppStatusAC} from \"../../app/app-reducer\";\r\n\r\nexport const Login = () => {\r\n\r\n    const dispatch = useAppDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    useEffect(() => {\r\n        dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n    }, [])\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: \"\",\r\n            password: \"\",\r\n            rememberMe: false,\r\n            captcha: \"\"\r\n        },\r\n        validate: (values: LoginDataType) => {\r\n            const errors: FormikErrorType = {}\r\n            if (!values.email) {\r\n                errors.email = 'Required'\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address ⚠'\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Required'\r\n            } else if (values.password.length < 3) {\r\n                errors.password = \"Password should be more 3 symbols ⚠\"\r\n            }\r\n            return errors\r\n        },\r\n        onSubmit: (values: LoginDataType) => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Navigate to={ROUTS.DEFAULT}/>\r\n    }\r\n\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}> here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField {...formik.getFieldProps(\"email\")}\r\n                                   label=\"Email\"\r\n                                   margin=\"normal\"/>\r\n                        {formik.errors.email &&\r\n                            <div style={{color: \"red\"}}>\r\n                                {formik.touched.email && formik.errors.email}\r\n                            </div>}\r\n                        <TextField {...formik.getFieldProps(\"password\")}\r\n                                   type=\"password\"\r\n                                   label=\"Password\"\r\n                                   margin=\"normal\"\r\n\r\n                        />\r\n                        {formik.touched.password && formik.errors.password &&\r\n                            <div style={{color: \"red\"}}>\r\n                                {formik.errors.password}\r\n                            </div>}\r\n                        <FormControlLabel label={'Remember me'}\r\n                                          control={<Checkbox {...formik.getFieldProps(\"rememberMe\")}\r\n                                                             checked={formik.values.rememberMe}/>}\r\n                        />\r\n                        <Button type={'submit'} color={\"secondary\"} variant={\"outlined\"}>\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n\r\n///----------- type -----------\\\\\\\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n}\r\nexport type LoginDataType = {\r\n    email: string\r\n    password: string,\r\n    rememberMe: boolean,\r\n    captcha: string\r\n}","import React, {useEffect} from \"react\";\r\nimport styles from \"./Error404.module.css\"\r\nimport {useAppDispatch} from \"../../api/store\";\r\nimport {setAppStatusAC} from \"../../app/app-reducer\";\r\n\r\nexport function Error404() {\r\n\r\n    const dispatch = useAppDispatch()\r\n    useEffect(() => {\r\n        dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n    }, [])\r\n\r\n    return (\r\n        <div className={styles.error}>\r\n            <h1>404</h1>\r\n            <h2>OOPS! PAGE NOT FOUND!</h2>\r\n        </div>\r\n    );\r\n}\r\n","import React, {useEffect} from \"react\";\r\nimport \"./App.css\";\r\nimport {AppBar, IconButton, Button, Toolbar, Typography, Container, LinearProgress} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {TodolistsList} from \"../features/TodolistsList/TodolistsList\";\r\nimport {RequestStatusType} from \"./app-reducer\";\r\nimport {AppRootStateType, useAppDispatch, useAppSelector} from \"../api/store\";\r\nimport ErrorSnackbar from \"../components/ErrorSnackbar/ErrorSnackbar\";\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {Navigate, Route, Routes} from \"react-router-dom\";\r\nimport {Error404} from \"../components/Error/Error404\";\r\nimport {initializeAppTC, logOutTC} from \"../features/Login/auth-reducer\";\r\nimport {CircularProgress} from \"@mui/material\";\r\nimport {useSelector} from \"react-redux\";\r\n\r\nfunction App() {\r\n    const status = useAppSelector<RequestStatusType>(state => state.app.status)\r\n    const dispatch = useAppDispatch()\r\n    const isInitialized = useAppSelector((state => state.app.isInitialized))\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const logOut = () => {\r\n        dispatch(logOutTC())\r\n    }\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress color={\"secondary\"}/>\r\n        </div>\r\n    }\r\n\r\n    return <div className=\"App\">\r\n        <ErrorSnackbar/>\r\n        <AppBar position={\"static\"} color={\"transparent\"}>\r\n            <Toolbar style={{justifyContent: \"space-between\"}}>\r\n                <IconButton edge={\"start\"} color={\"secondary\"} aria-label={\"menu\"}>\r\n                    <Menu/>\r\n                </IconButton>\r\n                <Typography variant=\"h5\">Todolists</Typography>\r\n                {isLoggedIn && <Button onClick={logOut} color={\"secondary\"} variant={\"outlined\"}>Log out</Button>}\r\n            </Toolbar>\r\n            {status === \"loading\" && <LinearProgress color={\"secondary\"}/>}\r\n        </AppBar>\r\n        <Container fixed>\r\n            <Routes>\r\n                <Route path={\"/*\"} element={<TodolistsList/>}/>\r\n                <Route path={\"login\"} element={<Login/>}/>\r\n                <Route path={\"/todolist\"} element={<TodolistsList/>}/>\r\n                <Route path={\"*\"} element={<Navigate to={\"/404\"}/>}/>\r\n                <Route path={\"/404\"} element={<Error404/>}/>\r\n            </Routes>\r\n        </Container>\r\n    </div>\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport {createTheme, ThemeProvider} from \"@material-ui/core\";\r\nimport {indigo, pink} from \"@material-ui/core/colors\";\r\nimport App from \"./app/App\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./api/store\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\n\r\nconst theme = createTheme({\r\n    palette: {\r\n        primary: indigo,\r\n        secondary: pink,\r\n        type: \"light\",\r\n    },\r\n});\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <ThemeProvider theme={theme}>\r\n            <BrowserRouter>\r\n                <App/>\r\n            </BrowserRouter>\r\n        </ThemeProvider>\r\n    </Provider>, document.getElementById(\"root\")\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}