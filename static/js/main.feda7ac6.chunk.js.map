{"version":3,"sources":["serviceWorker.ts","api/todolist-api.ts","features/TodolistsList/Todolist/todolists-reducer.ts","features/TodolistsList/Todolist/Task/tasks-reducer.ts","api/store.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","app/App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistAPI","get","title","post","todolistId","delete","put","todolistID","taskID","model","initialState","updateTaskTC","domainModel","dispatch","getState","task","tasks","find","t","id","apiModel","deadline","startDate","description","priority","status","then","res","type","updateTaskAC","rootReducer","combineReducers","state","action","filter","todoListId","map","todolist","copyState","stateCopy","todolists","forEach","tl","el","store","legacy_createStore","applyMiddleware","thunk","useAppDispatch","useDispatch","AddItemForm","memo","props","React","useState","setTitle","error","setError","onClickAddItem","trimmedTitle","trim","addItem","TextField","variant","size","value","onChange","e","currentTarget","onKeyDown","key","label","helperText","IconButton","color","AddOutlined","onClick","EditableSpan","changeTitle","text","setText","editMode","setEditMode","offEditMode","onBlur","autoFocus","onDoubleClick","Task","removeTask","changeTaskStatus","changeTaskTitle","onClickHandler","useCallback","onChangeHandler","newIsDoneValue","checked","Completed","New","onTitleChangeHandler","newValue","ListItem","className","alignItems","disableGutters","divider","Checkbox","DeleteOutlineOutlined","TodoList","useEffect","data","items","setTaskAC","tasksForTodolist","createOnClickHandler","changeTodoListFilter","addTask","taskJSX","length","todolistTitle","changeTodoListTitle","removeTodolist","List","style","listStyle","Button","margin","TodolistsList","useSelector","resultCode","removeTaskAC","removeTaskTC","taskTitle","item","addTaskTC","ChangeTodoListTitleAC","ChangeTodoListTitleTC","ChangeTodoListFilterAC","removeTodolistTC","addTodolist","addTodolistTC","todolistsComponents","allTodolistTask","Grid","Paper","padding","container","spacing","App","AppBar","position","Toolbar","justifyContent","edge","aria-label","Menu","Typography","Container","fixed","theme","createTheme","palette","primary","indigo","secondary","pink","ReactDOM","render","ThemeProvider","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"8LAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,IC0CMC,EAMAC,E,gIAhENC,E,MAAWC,EAAMC,OAAO,CAC1BC,QAAS,gDACTC,iBAAiB,EACjBC,QAAS,CACL,UAAW,0CAKNC,EAAc,WAGnB,OADgBN,EAASO,IAAoB,eAFxCD,EAAc,SAKRE,GAEX,OADgBR,EAASS,KAA2C,aAAc,CAACD,MAAOA,KANrFF,EAAc,SASRI,GAEX,OADgBV,EAASW,OAAT,qBAA4CD,KAVvDJ,EAAc,SAaRI,EAAoBF,GAI/B,OAHgBR,EAASY,IAAT,qBACEF,GACd,CAACF,MAAOA,KAhBPF,EAAc,SAmBdO,GACL,OAAOb,EAASO,IAAT,qBACWM,EADX,YApBFP,EAAc,SAuBXO,EAAoBL,GAC5B,OAAOR,EAASS,KAAT,qBAAsGI,EAAtG,UAA0H,CAACL,WAxB7HF,EAAc,SA0BXQ,EAAgBD,GACxB,OAAOb,EAASW,OAAT,qBACWE,EADX,kBAC+BC,KA5BjCR,EAAc,SA8BXO,EAAoBC,EAAgBC,GAC5C,OAAOf,EAASY,IAAT,qBACWC,EADX,kBAC+BC,GAAUC,K,SAiB5CjB,O,aAAAA,I,2BAAAA,I,yBAAAA,I,kBAAAA,M,cAMAC,O,aAAAA,I,mBAAAA,I,WAAAA,I,uBAAAA,I,kBAAAA,M,KC/DZ,IAAMiB,EAA0C,G,QCE1CA,EAA8B,GAkFvBC,EAAe,SAACH,EAAgBD,EAAoBK,GAArC,OAAiF,SAACC,EAAiCC,GAC3I,IAAMC,EAAOD,IAAWE,MAAMT,GAAYU,MAAK,SAACC,GAAD,OAAOA,EAAEC,KAAOX,KAC/D,GAAIO,EAAM,CACN,IAAMK,EAA8B,aAChClB,MAAOa,EAAKb,MACZmB,SAAUN,EAAKM,SACfC,UAAWP,EAAKO,UAChBC,YAAaR,EAAKQ,YAClBC,SAAUT,EAAKS,SACfC,OAAQV,EAAKU,QACVb,GAGPZ,EAAwBO,EAAYC,EAAQY,GAAUM,MAAK,SAACC,GACxDd,EA1CgB,SAACL,EAAgBC,EAAmCF,GAApD,MAA4E,CACpGqB,KAAM,cACNpB,SACAC,QACAF,cAsCiBsB,CAAarB,EAAQI,EAAaL,U,gBC/FjDuB,EAAcC,YAAgB,CAChCf,MDAwB,WAGP,IAFjBgB,EAEgB,uDAFRtB,EACRuB,EACgB,uCAChB,OAAQA,EAAOL,MACX,IAAK,cACD,OAAO,2BACAI,GADP,kBAEKC,EAAO1B,WAAayB,EAAMC,EAAO1B,YAAY2B,QAAO,SAAAnB,GAAI,OAAIA,EAAKI,KAAOc,EAAOzB,YAExF,IAAK,WACD,OAAO,2BACAwB,GADP,kBAEKC,EAAOlB,KAAKoB,WAFjB,CAE+BF,EAAOlB,MAFtC,mBAE+CiB,EAAMC,EAAOlB,KAAKoB,gBAGrE,IAAK,cACD,OAAO,2BACAH,GADP,kBAEKC,EAAO1B,WAAayB,EAAMC,EAAO1B,YAAY6B,KAAI,SAAArB,GAAI,OAAIA,EAAKI,KAAOc,EAAOzB,OAAnB,2BACnDO,GACAkB,EAAOxB,OACVM,OAEZ,IAAK,eACD,OAAO,2BAAIiB,GAAX,kBAAmBC,EAAOI,SAASlB,GAAK,KAE5C,IAAK,kBACD,IAAImB,EAAS,eAAON,GAEpB,cADOM,EAAUL,EAAOd,IACjBmB,EACX,IAAK,WACD,OAAO,2BAAIN,GAAX,kBAAmBC,EAAO1B,WAAa0B,EAAOjB,QAClD,IAAK,gBACD,IAAMuB,EAAS,eAAOP,GAItB,OAHAC,EAAOO,UAAUC,SAAQ,SAACC,GACtBH,EAAUG,EAAGvB,IAAM,MAEhBoB,EAEX,QACI,OAAOP,ICxCfQ,UFH4B,WAGC,IAF7BR,EAE4B,uDAFOtB,EACnCuB,EAC4B,uCAC5B,OAAQA,EAAOL,MACX,IAAK,eACD,MAAM,CAAN,2BAAYK,EAAOI,UAAnB,IAA6BH,OAAQ,SAArC,mBAAgDF,IACpD,IAAK,kBACD,OAAOA,EAAME,QAAO,SAACQ,GAAD,OAAQA,EAAGvB,KAAOc,EAAOd,MACjD,IAAK,yBACD,OAAOa,EAAMI,KAAI,SAACM,GAAD,OACbA,EAAGvB,KAAOc,EAAOd,GAAjB,2BAA0BuB,GAA1B,IAA8BR,OAAQD,EAAOC,SAAUQ,KAE/D,IAAK,wBACD,OAAOV,EAAMI,KAAI,SAACM,GAAD,OACbA,EAAGvB,KAAOc,EAAOd,GAAjB,2BAA0BuB,GAA1B,IAA8BxC,MAAO+B,EAAO/B,QAASwC,KAE7D,IAAK,gBACD,OAAOT,EAAOO,UAAUJ,KAAI,SAAAO,GAAE,kCAASA,GAAT,IAAaT,OAAQ,WACvD,QACI,OAAOF,MEdNY,EAAQC,YAAmBf,EAAagB,YAAgBC,MACxDC,EAAiB,kBAAMC,eAGpC7D,OAAOwD,MAAQA,E,gDCXFM,EAAcC,gBAAK,SAACC,GAE7B,MAA0BC,IAAMC,SAAiB,IAAjD,mBAAOpD,EAAP,KAAcqD,EAAd,KACA,EAA0BD,oBAAkB,GAA5C,mBAAOE,EAAP,KAAcC,EAAd,KAQMC,EAAiB,WACnB,IAAMC,EAAezD,EAAM0D,OACvBD,EACAP,EAAMS,QAAQF,GAEdF,GAAS,GAEbF,EAAS,KAGb,OACI,6BACI,kBAACO,EAAA,EAAD,CACIC,QAAS,WACTC,KAAM,QACNC,MAAO/D,EACPgE,SAtBa,SAACC,GACtBZ,EAASY,EAAEC,cAAcH,OACzBT,GAASC,GAAS,IAqBVY,UAnBa,SAACF,GAAD,MACX,UAAVA,EAAEG,KAAmBZ,KAmBba,MAAO,YACPf,MAAOA,EACPgB,WAAYhB,GAAS,uBAEzB,kBAACiB,EAAA,EAAD,CAAYC,MAAO,aACf,kBAACC,EAAA,EAAD,CAAaC,QAASlB,SCnCzBmB,EAAe1B,gBAAK,YAAkD,IAAhDjD,EAA+C,EAA/CA,MAAO4E,EAAwC,EAAxCA,YAEtC,EAAwBzB,IAAMC,SAAiBpD,GAA/C,mBAAO6E,EAAP,KAAaC,EAAb,KACA,EAAgC1B,oBAAkB,GAAlD,mBAAO2B,EAAP,KAAiBC,EAAjB,KAUMC,EAAc,WAChBD,GAAY,GACZJ,EAAYC,IAGhB,OAAOE,EACH,kBAACnB,EAAA,EAAD,CACIY,MAAO,UACPT,MAAOc,EACPb,SAjBgB,SAACC,GACrBa,EAAQb,EAAEC,cAAcH,QAiBpBI,UAfqB,SAACF,GAAD,MACf,UAAVA,EAAEG,KAAmBa,KAejBC,OAAQD,EACRE,WAAS,IAGb,0BAAMC,cAlBS,WACfJ,GAAY,KAiBsBhF,M,oCCzB7BqF,EAAOpC,gBAAK,YAAuF,IAArFpC,EAAoF,EAApFA,KAAMR,EAA8E,EAA9EA,WAAYiF,EAAkE,EAAlEA,WAAYC,EAAsD,EAAtDA,iBAAkBC,EAAoC,EAApCA,gBAEvE,iBAAgC3E,GAAzBI,EAAP,EAAOA,GAAIM,EAAX,EAAWA,OAAQvB,EAAnB,EAAmBA,MAEbyF,EAAiBC,uBAAY,kBAAMJ,EAAWzE,EAAKI,GAAIZ,KAAa,CAACQ,EAAKI,GAAIZ,EAAYiF,IAC1FK,EAAkBD,uBAAY,SAACzB,GACjC,IAAI2B,EAAiB3B,EAAEC,cAAc2B,QACrCN,EAAiBtE,EAAIZ,EAAYuF,EAAiBtG,EAAawG,UAAYxG,EAAayG,OACzF,CAAC9E,EAAIZ,EAAYkF,IACdS,EAAuBN,uBAAY,SAACO,GACtCT,EAAgBvE,EAAIgF,EAAU5F,KAC/B,CAACY,EAAIZ,EAAYmF,IAEpB,OACI,kBAACU,EAAA,EAAD,CACI9B,IAAKnD,EACLkF,UAAW5E,IAAWjC,EAAawG,UAAY,cAAgB,GAC/DM,WAAY,SACZC,gBAAgB,EAChBC,SAAS,GAET,kBAACC,EAAA,EAAD,CACIzC,KAAM,QACNU,MAAO,UACPR,SAAU2B,EACVE,QAAStE,IAAWjC,EAAawG,YAErC,kBAACnB,EAAD,CAAc3E,MAAOA,EAAO4E,YAAaoB,IACzC,kBAACzB,EAAA,EAAD,KACI,kBAACiC,EAAA,EAAD,CAAuB9B,QAASe,SCxBnCgB,EAAWxD,gBAAK,SAACC,GAE1B,IAAMvC,EAAWmC,IAEjB4D,qBAAU,WLqDc,IAACrG,EKpDrBM,GLoDqBN,EKpDC6C,EAAMjC,GLoDgB,SAACN,GACjDb,EAAqBO,GAChBmB,MAAK,SAACC,GACH,IAAMX,EAAQW,EAAIkF,KAAKC,MACvBjG,EAPa,SAACG,EAAmBT,GAApB,MAA4C,CAACqB,KAAM,WAAYZ,QAAOT,cAO1EwG,CAAU/F,EAAOT,YKvD/B,IAEH,IAAIyG,EAAmB5D,EAAMpC,MAER,WAAjBoC,EAAMlB,SACN8E,EAAmB5D,EAAMpC,MAAMkB,QAAO,SAAAhB,GAAC,OAAIA,EAAEO,SAAWjC,EAAayG,QAEpD,cAAjB7C,EAAMlB,SACN8E,EAAmB5D,EAAMpC,MAAMkB,QAAO,SAAAhB,GAAC,OAAIA,EAAEO,SAAWjC,EAAawG,cAGzE,IAAMiB,EAAuB,SAAC/E,GAC1B,OAAO,kBAAMkB,EAAM8D,qBAAqBhF,EAAQkB,EAAMjC,MAEpDgG,EAAUvB,uBAAY,SAAC1F,GAAD,OAAmBkD,EAAM+D,QAAQjH,EAAOkD,EAAMjC,MAAK,CAACiC,EAAM+D,QAAS/D,EAAMjC,KAI/FiG,EAAUJ,EAAiBK,OAC7BL,EAAiB5E,KAAI,SAAAlB,GAAC,OAAI,kBAACqE,EAAD,CAAMjB,IAAKpD,EAAEC,GAAIJ,KAAMG,EAAGX,WAAY6C,EAAMjC,GAAIqE,WAAYpC,EAAMoC,WAC5DE,gBAAiBtC,EAAMsC,gBACvBD,iBAAkBrC,EAAMqC,sBAClD,wDAA6B,sCAEvC,OACI,6BACI,4BACI,kBAACZ,EAAD,CAAc3E,MAAOkD,EAAMlD,MAAO4E,YAXlB,SAACwC,GAAD,OACxBlE,EAAMmE,oBAAoBD,EAAelE,EAAMjC,OAWvC,kBAACsD,EAAA,EAAD,KACI,kBAACiC,EAAA,EAAD,CAAuBhC,MAAO,UAAWE,QAdlC,kBAAMxB,EAAMoE,eAAepE,EAAMjC,SAiBhD,kBAAC+B,EAAD,CAAaW,QAASsD,IACtB,kBAACM,EAAA,EAAD,CAAMC,MAAO,CAACC,UAAW,SACpBP,GAEL,6BACI,kBAACQ,EAAA,EAAD,CACI5D,KAAM,QACND,QAAS,WACTW,MAAwB,QAAjBtB,EAAMlB,OAAmB,YAAc,UAC9C0C,QAASqC,EAAqB,OAC9BS,MAAO,CAACG,OAAQ,QALpB,OAUA,kBAACD,EAAA,EAAD,CACI5D,KAAM,QACND,QAAS,WACTW,MAAwB,WAAjBtB,EAAMlB,OAAsB,YAAc,UACjD0C,QAASqC,EAAqB,UAC9BS,MAAO,CAACG,OAAQ,QALpB,UASA,kBAACD,EAAA,EAAD,CACI5D,KAAM,QACND,QAAS,WACTW,MAAwB,cAAjBtB,EAAMlB,OAAyB,YAAc,UACpD0C,QAASqC,EAAqB,aAC9BS,MAAO,CAACG,OAAQ,QALpB,kBCxDHC,GAAgB,WAEzB,IAAMjH,EAAWmC,IAEjB4D,qBAAU,WACN/F,GPuB8B,SAACA,GACnCb,IAA0B0B,MAAK,SAACC,GAC5Bd,EALsD,CAACe,KAAM,gBAAiBY,UAKtDb,EAAIkF,eOxB7B,IAEH,IAAMrE,EAAYuF,aAAyD,SAAA/F,GAAK,OAAIA,EAAMQ,aACpFxB,EAAQ+G,aAA6C,SAAA/F,GAAK,OAAIA,EAAMhB,SAGpEwE,EAAaI,uBAAY,SAACpF,EAAgBD,GAC5CM,EN6CoB,SAACL,EAAgBD,GAAjB,OAAwC,SAACM,GACjEb,EAAwBQ,EAAQD,GAAYmB,MAAK,SAACC,GAClB,IAAxBA,EAAIkF,KAAKmB,YACTnH,EAzBgB,SAACL,EAAgBD,GAAjB,MAAyC,CACjEqB,KAAM,cACNpB,SACAD,cAsBiB0H,CAAazH,EAAQD,QMhDzB2H,CAAa1H,EAAQD,MAC/B,CAACM,IACEsG,EAAUvB,uBAAY,SAACuC,EAAmB5H,GAC5CM,ENiDiB,SAACsH,EAAmB5H,GAApB,OAA2C,SAACM,GACjEb,EAAwBO,EAAY4H,GAAWzG,MAAK,SAACC,GACjDd,EA1B4C,CAACe,KAAM,WAAYb,KA0B5CY,EAAIkF,KAAKA,KAAKuB,WMnDxBC,CAAUF,EAAW5H,MAC/B,CAACM,IACE4E,EAAmBG,uBAAY,SAACpF,EAAgBD,EAAoBkB,GACtEZ,EAASF,EAAaH,EAAQD,EAAY,CAACkB,cAC5C,CAACZ,IACE6E,EAAkBE,uBAAY,SAACpF,EAAgBN,EAAeK,GAChEM,EAASF,EAAaH,EAAQD,EAAY,CAACL,aAC5C,CAACW,IAGE0G,EAAsB3B,uBAAY,SAAC1F,EAAeK,GACpD,IAAIwC,EPgByB,SAAC7C,EAAeiB,GAAhB,OAA+B,SAACN,GACjEb,EAA2BmB,EAAIjB,GAAOwB,MAAK,SAACC,GACxCd,EA9B6B,SAACX,EAAeiB,GAAhB,MAAgC,CACjES,KAAM,wBACNT,KACAjB,SA2BaoI,CAAsBpI,EAAOiB,QOlB1BoH,CAAsBrI,EAAOK,GACzCM,EAASkC,KACV,CAAClC,IACEqG,EAAuBtB,uBAAY,SAAC1D,EAA0B3B,GAChEM,EPX8B,SAACM,EAAYe,GAAb,MAA2C,CAC7EN,KAAM,yBACNT,KACAe,UOQasG,CAAuBjI,EAAY2B,MAC7C,CAACrB,IACE2G,EAAiB5B,uBAAY,SAACrF,GAChC,IAAIwC,EPDoB,SAACxC,GAAD,OAAwB,SAACM,GACrDb,EAA2BO,GAAYmB,MAAK,SAACC,GACzCd,EAtByC,CAACe,KAAM,kBAAmBT,GAsBzCZ,QODdkI,CAAiBlI,GAC7BM,EAASkC,KACV,CAAClC,IACE6H,EAAc9C,uBAAY,SAAC1F,GAC7B,IAAI6C,EPAiB,SAAC7C,GAAD,OAAmB,SAACW,GAC7Cb,EAA2BE,GAAOwB,MAAK,SAACC,GACpCd,EA1BkD,CAACe,KAAM,eAAgBS,SA0BlDV,EAAIkF,KAAKA,KAAKuB,WOFzBO,CAAczI,GAC1BW,EAASkC,KACV,CAAClC,IAEE+H,EAAsBpG,EAAUJ,KAAI,SAACM,GACvC,IAAImG,EAAkB7H,EAAM0B,EAAGvB,IAC/B,OACI,kBAAC2H,EAAA,EAAD,CAAMV,MAAI,EAAC9D,IAAK5B,EAAGvB,IACf,kBAAC4H,EAAA,EAAD,CAAOhF,QAAS,YAAa2D,MAAO,CAACsB,QAAS,SAC1C,kBAACrC,EAAD,CACIxF,GAAIuB,EAAGvB,GACPjB,MAAOwC,EAAGxC,MACVc,MAAO6H,EACP3G,OAAQQ,EAAGR,OACXiF,QAASA,EACT3B,WAAYA,EACZgC,eAAgBA,EAChB/B,iBAAkBA,EAClByB,qBAAsBA,EACtBxB,gBAAiBA,EACjB6B,oBAAqBA,SAOzC,OACI,oCACI,kBAACuB,EAAA,EAAD,CAAMG,WAAS,EAACvB,MAAO,CAACsB,QAAS,WAC7B,kBAAC9F,EAAD,CAAaW,QAAS6E,KAE1B,kBAACI,EAAA,EAAD,CAAMG,WAAS,EAACC,QAAS,GACpBN,KC9DFO,OApBf,WAEI,OAAO,yBAAK9C,UAAU,OAClB,kBAAC+C,EAAA,EAAD,CAAQC,SAAU,SAAU3E,MAAO,eAC/B,kBAAC4E,EAAA,EAAD,CAAS5B,MAAO,CAAC6B,eAAgB,kBAC7B,kBAAC9E,EAAA,EAAD,CAAY+E,KAAM,QAAS9E,MAAO,YAAa+E,aAAY,QACvD,kBAACC,EAAA,EAAD,OAEJ,kBAACC,EAAA,EAAD,CAAY5F,QAAQ,MAApB,aACA,kBAAC6D,EAAA,EAAD,CAAQlD,MAAO,YAAaX,QAAS,YAArC,WAKR,kBAAC6F,EAAA,EAAD,CAAWC,OAAK,GACZ,kBAAC,GAAD,SCXNC,GAAQC,YAAY,CACtBC,QAAS,CACLC,QAASC,IACTC,UAAWC,IACXxI,KAAM,WAIdyI,IAASC,OACL,kBAAC,IAAD,CAAU1H,MAAOA,GACb,kBAAC2H,EAAA,EAAD,CAAeT,MAAOA,IAClB,kBAAC,GAAD,QAEKU,SAASC,eAAe,SXoHnC,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlJ,MAAK,SAAAmJ,GACJA,EAAaC,gBAEdC,OAAM,SAAAvH,GACLwH,QAAQxH,MAAMA,EAAMyH,a","file":"static/js/main.feda7ac6.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import axios, {AxiosResponse} from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.1/\",\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '9c1a69da-f1af-40a7-806f-4d3b095c12b8',\r\n    }\r\n})\r\n\r\n///----------- api -----------\\\\\\\r\nexport const todolistAPI = {\r\n    getTodolist() {\r\n        const promise = instance.get<TodoListType[]>(\"todo-lists\")\r\n        return promise\r\n    },\r\n    createTodolist(title: string) {\r\n        const promise = instance.post<ResponseType<{ item: TodoListType }>>(\"todo-lists\", {title: title})\r\n        return promise\r\n    },\r\n    deleteTodolist(todolistId: string) {\r\n        const promise = instance.delete<ResponseType>(`todo-lists/${todolistId}`)\r\n        return promise\r\n    },\r\n    updateTodolist(todolistId: string, title: string) {\r\n        const promise = instance.put<ResponseType<{ title: string }>>(\r\n            `todo-lists/${todolistId}`,\r\n            {title: title})\r\n        return promise\r\n    },\r\n    getTasks(todolistID: string) {\r\n        return instance.get<GetTasksResponse>(\r\n            `todo-lists/${todolistID}/tasks`)\r\n    },\r\n    createTasks(todolistID: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: CreateTaskType }>>>(`todo-lists/${todolistID}/tasks`, {title});\r\n    },\r\n    deleteTasks(taskID: string, todolistID: string) {\r\n        return instance.delete<ResponseType>(\r\n            `todo-lists/${todolistID}/tasks/${taskID}`)\r\n    },\r\n    updateTasks(todolistID: string, taskID: string, model: UpdateTasksModelType) {\r\n        return instance.put<ResponseType>(\r\n            `todo-lists/${todolistID}/tasks/${taskID}`, model)\r\n    }\r\n}\r\n\r\n///----------- types -----------\\\\\\\r\nexport type ResponseType<T = {}> = {\r\n    resultCode: number,\r\n    messages: string[],\r\n    fieldsErrors: string[],\r\n    data: T\r\n}\r\nexport type TodoListType = {\r\n    id: string,\r\n    addedDate: string,\r\n    order: number,\r\n    title: string\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities,\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todolistId: string\r\n    order: number\r\n    addedData: string\r\n}\r\nexport type CreateTaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities,\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedData: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\nexport type UpdateTasksModelType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}","import {todolistAPI, TodoListType} from \"../../../api/todolist-api\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nconst initialState: Array<TodoListDomainType> = []\r\n\r\nexport const todolistsReducer = (\r\n    state: Array<TodoListDomainType> = initialState,\r\n    action: ActionsType\r\n): Array<TodoListDomainType> => {\r\n    switch (action.type) {\r\n        case \"ADD-TODOLIST\":\r\n            return [{...action.todolist, filter: \"all\"}, ...state];\r\n        case \"REMOVE-TODOLIST\":\r\n            return state.filter((tl) => tl.id !== action.id);\r\n        case \"CHANGE-TODOLIST-FILTER\":\r\n            return state.map((tl) =>\r\n                tl.id === action.id ? {...tl, filter: action.filter} : tl\r\n            );\r\n        case \"CHANGE-TODOLIST-TITLE\":\r\n            return state.map((tl) =>\r\n                tl.id === action.id ? {...tl, title: action.title} : tl\r\n            );\r\n        case \"SET-TODOLISTS\":\r\n            return action.todolists.map(el => ({...el, filter: \"all\"}))\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n///----------- action creators -----------\\\\\\\r\nexport const RemoveTodoListAC = (id: string) => ({type: \"REMOVE-TODOLIST\", id,} as const);\r\nexport const AddTodoListAC = (todolist: TodoListType) => ({type: \"ADD-TODOLIST\", todolist} as const);\r\nexport const ChangeTodoListTitleAC = (title: string, id: string) => ({\r\n    type: \"CHANGE-TODOLIST-TITLE\",\r\n    id,\r\n    title,\r\n} as const);\r\nexport const ChangeTodoListFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: \"CHANGE-TODOLIST-FILTER\",\r\n    id,\r\n    filter,\r\n} as const);\r\nexport const setTodolistsAC = (todolists: TodoListType[]) => ({type: \"SET-TODOLISTS\", todolists} as const)\r\n\r\n///----------- thunks creators -----------\\\\\\\r\nexport const fetchTodolistsTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistAPI.getTodolist().then((res) => {\r\n        dispatch(setTodolistsAC(res.data))\r\n    })\r\n}\r\nexport const removeTodolistTC = (todolistID: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistAPI.deleteTodolist(todolistID).then((res) => {\r\n        dispatch(RemoveTodoListAC(todolistID))\r\n    })\r\n}\r\nexport const addTodolistTC = (title: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistAPI.createTodolist(title).then((res) => {\r\n        dispatch(AddTodoListAC(res.data.data.item))\r\n    })\r\n}\r\nexport const ChangeTodoListTitleTC = (title: string, id: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistAPI.updateTodolist(id, title).then((res) => {\r\n        dispatch(ChangeTodoListTitleAC(title, id))\r\n    })\r\n}\r\n\r\n///----------- types -----------\\\\\\\r\nexport type AddTodoListAT = ReturnType<typeof AddTodoListAC>\r\nexport type RemoveTodoListAT = ReturnType<typeof RemoveTodoListAC>\r\nexport type SetTodoListAT = ReturnType<typeof setTodolistsAC>\r\n\r\ntype ActionsType =\r\n    | RemoveTodoListAT\r\n    | AddTodoListAT\r\n    | ReturnType<typeof ChangeTodoListFilterAC>\r\n    | ReturnType<typeof ChangeTodoListTitleAC>\r\n    | SetTodoListAT\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodoListDomainType = TodoListType & {\r\n    filter: FilterValuesType\r\n}","import {AddTodoListAT, RemoveTodoListAT, SetTodoListAT} from \"../todolists-reducer\";\r\nimport {CreateTaskType, TaskType, todolistAPI, UpdateTasksModelType} from \"../../../../api/todolist-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"../../../../api/store\";\r\n\r\nconst initialState: TaskStateType = {}\r\n\r\nexport const tasksReducer = (\r\n    state = initialState,\r\n    action: ActionsType\r\n): TaskStateType => {\r\n    switch (action.type) {\r\n        case \"REMOVE-TASK\":\r\n            return {\r\n                ...state,\r\n                [action.todolistID]: state[action.todolistID].filter(task => task.id !== action.taskID)\r\n            }\r\n        case \"ADD-TASK\": {\r\n            return {\r\n                ...state,\r\n                [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]\r\n            } as TaskStateType\r\n        }\r\n        case \"UPDATE-TASK\":\r\n            return {\r\n                ...state,\r\n                [action.todolistID]: state[action.todolistID].map(task => task.id === action.taskID ? {\r\n                    ...task,\r\n                    ...action.model\r\n                } : task)\r\n            }\r\n        case \"ADD-TODOLIST\": {\r\n            return {...state, [action.todolist.id]: []}\r\n        }\r\n        case \"REMOVE-TODOLIST\":\r\n            let copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        case \"SET-TASK\":\r\n            return {...state, [action.todolistID]: action.tasks}\r\n        case \"SET-TODOLISTS\": {\r\n            const stateCopy = {...state}\r\n            action.todolists.forEach((tl) => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n            return stateCopy;\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n///----------- action creators -----------\\\\\\\r\nexport const removeTaskAC = (taskID: string, todolistID: string) => ({\r\n    type: \"REMOVE-TASK\",\r\n    taskID,\r\n    todolistID\r\n} as const);\r\nexport const addTaskAC = (task: CreateTaskType) => ({type: \"ADD-TASK\", task} as const);\r\nexport const updateTaskAC = (taskID: string, model: UpdateDomainTasksModelType, todolistID: string) => ({\r\n    type: \"UPDATE-TASK\",\r\n    taskID,\r\n    model,\r\n    todolistID\r\n} as const);\r\nexport const setTaskAC = (tasks: TaskType[], todolistID: string) => ({type: \"SET-TASK\", tasks, todolistID} as const)\r\n\r\n///----------- thunks creators -----------\\\\\\\r\nexport const fetchTasksTC = (todolistID: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistAPI.getTasks(todolistID)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTaskAC(tasks, todolistID))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskID: string, todolistID: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistAPI.deleteTasks(taskID, todolistID).then((res) => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(removeTaskAC(taskID, todolistID))\r\n        }\r\n    })\r\n}\r\nexport const addTaskTC = (taskTitle: string, todolistID: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistAPI.createTasks(todolistID, taskTitle).then((res) => {\r\n        dispatch(addTaskAC(res.data.data.item))\r\n    })\r\n}\r\nexport const updateTaskTC = (taskID: string, todolistID: string, domainModel: UpdateDomainTasksModelType) => (dispatch: Dispatch<ActionsType>, getState: () => AppRootStateType) => {\r\n    const task = getState().tasks[todolistID].find((t) => t.id === taskID)\r\n    if (task) {\r\n        const apiModel: UpdateTasksModelType = {\r\n            title: task.title,\r\n            deadline: task.deadline,\r\n            startDate: task.startDate,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            status: task.status,\r\n            ...domainModel\r\n\r\n        }\r\n        todolistAPI.updateTasks(todolistID, taskID, apiModel).then((res) => {\r\n            dispatch(updateTaskAC(taskID, domainModel, todolistID))\r\n        })\r\n    }\r\n}\r\n\r\n///----------- types -----------\\\\\\\r\nexport type TaskStateType = {\r\n    [todolistID: string]: Array<TaskType>;\r\n};\r\n\r\ntype ActionsType =\r\n    ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodoListAT\r\n    | RemoveTodoListAT\r\n    | SetTodoListAT\r\n    | ReturnType<typeof setTaskAC>\r\n\r\nexport type UpdateDomainTasksModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: number\r\n    priority?: number\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n\r\n\r\n","import {tasksReducer} from \"../features/TodolistsList/Todolist/Task/tasks-reducer\";\r\nimport {todolistsReducer} from \"../features/TodolistsList/Todolist/todolists-reducer\";\r\nimport {AnyAction, applyMiddleware, combineReducers, legacy_createStore} from \"redux\";\r\nimport thunk, {ThunkDispatch} from \"redux-thunk\"\r\nimport {useDispatch} from \"react-redux\";\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer\r\n})\r\n\r\nexport const store = legacy_createStore(rootReducer, applyMiddleware(thunk));\r\nexport const useAppDispatch = () => useDispatch<AppDispatchType>()\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\n///----------- types -----------\\\\\\\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\ntype AppDispatchType = ThunkDispatch<AppRootStateType, void, AnyAction>\r\n","import {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddOutlined} from \"@material-ui/icons\";\r\nimport React, {ChangeEvent, KeyboardEvent, memo, useState} from \"react\";\r\n\r\nexport const AddItemForm = memo((props: AddItemFormPropsType) => {\r\n\r\n    const [title, setTitle] = React.useState<string>(\"\");\r\n    const [error, setError] = useState<boolean>(false);\r\n\r\n    const onChangeSetTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value);\r\n        error && setError(false);\r\n    };\r\n    const onKeyDownAddItem = (e: KeyboardEvent<HTMLInputElement>) =>\r\n        e.key === \"Enter\" && onClickAddItem();\r\n    const onClickAddItem = () => {\r\n        const trimmedTitle = title.trim();\r\n        if (trimmedTitle) {\r\n            props.addItem(trimmedTitle);\r\n        } else {\r\n            setError(true);\r\n        }\r\n        setTitle(\"\");\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                variant={\"outlined\"}\r\n                size={\"small\"}\r\n                value={title}\r\n                onChange={onChangeSetTitle}\r\n                onKeyDown={onKeyDownAddItem}\r\n                label={\"Add title\"}\r\n                error={error}\r\n                helperText={error && \"Title is required!\"}\r\n            />\r\n            <IconButton color={\"secondary\"}>\r\n                <AddOutlined onClick={onClickAddItem}/>\r\n            </IconButton>\r\n        </div>\r\n    );\r\n});\r\n\r\n///----------- type -----------\\\\\\\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void;\r\n};","import {TextField} from \"@material-ui/core\";\r\nimport React, {ChangeEvent, useState, KeyboardEvent, memo} from \"react\";\r\n\r\nexport const EditableSpan = memo(({title, changeTitle}: EditableSpanPropsType) => {\r\n\r\n    const [text, setText] = React.useState<string>(title);\r\n    const [editMode, setEditMode] = useState<boolean>(false);\r\n\r\n    const onChangeSetText = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setText(e.currentTarget.value);\r\n    };\r\n    const onKeyDownChangeTitle = (e: KeyboardEvent<HTMLInputElement>) =>\r\n        e.key === \"Enter\" && offEditMode();\r\n    const onEditMode = () => {\r\n        setEditMode(true);\r\n    };\r\n    const offEditMode = () => {\r\n        setEditMode(false);\r\n        changeTitle(text);\r\n    };\r\n\r\n    return editMode ? (\r\n        <TextField\r\n            color={\"primary\"}\r\n            value={text}\r\n            onChange={onChangeSetText}\r\n            onKeyDown={onKeyDownChangeTitle}\r\n            onBlur={offEditMode}\r\n            autoFocus\r\n        />\r\n    ) : (\r\n        <span onDoubleClick={onEditMode}>{title}</span>\r\n    );\r\n});\r\n\r\n///----------- type -----------\\\\\\\r\ntype EditableSpanPropsType = {\r\n    title: string;\r\n    changeTitle: (editedTitle: string) => void;\r\n};","import React, {ChangeEvent, memo, useCallback} from \"react\";\r\nimport {Checkbox, IconButton, ListItem} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"../../../../components/EditableSpan/EditableSpan\";\r\nimport {DeleteOutlineOutlined} from \"@material-ui/icons\";\r\nimport {TaskStatuses, TaskType} from \"../../../../api/todolist-api\";\r\n\r\nexport const Task = memo(({task, todolistID, removeTask, changeTaskStatus, changeTaskTitle}: TaskPropsType) => {\r\n\r\n    const {id, status, title} = {...task}\r\n\r\n    const onClickHandler = useCallback(() => removeTask(task.id, todolistID), [task.id, todolistID, removeTask])\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        changeTaskStatus(id, todolistID, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New,)\r\n    }, [id, todolistID, changeTaskStatus])\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        changeTaskTitle(id, newValue, todolistID)\r\n    }, [id, todolistID, changeTaskTitle])\r\n\r\n    return (\r\n        <ListItem\r\n            key={id}\r\n            className={status === TaskStatuses.Completed ? \"task isDone\" : \"\"}\r\n            alignItems={\"center\"}\r\n            disableGutters={true}\r\n            divider={true}\r\n        >\r\n            <Checkbox\r\n                size={\"small\"}\r\n                color={\"primary\"}\r\n                onChange={onChangeHandler}\r\n                checked={status === TaskStatuses.Completed}\r\n            />\r\n            <EditableSpan title={title} changeTitle={onTitleChangeHandler}/>\r\n            <IconButton>\r\n                <DeleteOutlineOutlined onClick={onClickHandler}/>\r\n            </IconButton>\r\n        </ListItem>\r\n    );\r\n});\r\n\r\n///----------- type -----------\\\\\\\r\nexport type TaskPropsType = {\r\n    task: TaskType,\r\n    todolistID: string,\r\n    removeTask: (taskID: string, todolistID: string) => void;\r\n    changeTaskTitle: (taskTitle: string, title: string, todolistID: string) => void;\r\n    changeTaskStatus: (taskID: string, todolistID: string, status: TaskStatuses) => void;\r\n}","import React, {memo, useCallback, useEffect} from \"react\";\r\nimport {AddItemForm} from \"../../../components/AddItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"../../../components/EditableSpan/EditableSpan\";\r\nimport {Button, IconButton, List} from \"@material-ui/core\";\r\nimport {DeleteOutlineOutlined} from \"@material-ui/icons\";\r\nimport {TaskStatuses, TaskType} from \"../../../api/todolist-api\";\r\nimport {FilterValuesType} from \"./todolists-reducer\";\r\nimport {fetchTasksTC} from \"./Task/tasks-reducer\";\r\nimport {useAppDispatch} from \"../../../api/store\";\r\nimport {Task} from \"./Task/Task\";\r\n\r\nexport const TodoList = memo((props: TodoListPropsType) => {\r\n\r\n    const dispatch = useAppDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTasksTC(props.id))\r\n    }, [])\r\n\r\n    let tasksForTodolist = props.tasks;\r\n\r\n    if (props.filter === \"active\") {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === \"completed\") {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    const createOnClickHandler = (filter: FilterValuesType) => {\r\n        return () => props.changeTodoListFilter(filter, props.id);\r\n    };\r\n    const addTask = useCallback((title: string) => props.addTask(title, props.id), [props.addTask, props.id]);\r\n    const removeTodolist = () => props.removeTodolist(props.id);\r\n    const changeTodoListTitle = (todolistTitle: string) =>\r\n        props.changeTodoListTitle(todolistTitle, props.id);\r\n    const taskJSX = tasksForTodolist.length ?\r\n        tasksForTodolist.map(t => <Task key={t.id} task={t} todolistID={props.id} removeTask={props.removeTask}\r\n                                        changeTaskTitle={props.changeTaskTitle}\r\n                                        changeTaskStatus={props.changeTaskStatus}\r\n        />) : <span>I'm empty! Fill me up! <b>㋡</b></span>\r\n\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditableSpan title={props.title} changeTitle={changeTodoListTitle}/>\r\n                <IconButton>\r\n                    <DeleteOutlineOutlined color={\"primary\"} onClick={removeTodolist}/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addTask}/>\r\n            <List style={{listStyle: \"none\"}}>\r\n                {taskJSX}\r\n            </List>\r\n            <div>\r\n                <Button\r\n                    size={\"small\"}\r\n                    variant={\"outlined\"}\r\n                    color={props.filter === \"all\" ? \"secondary\" : \"primary\"}\r\n                    onClick={createOnClickHandler(\"all\")}\r\n                    style={{margin: \"5px\"}}\r\n                    /* onClick={() => props.changeTodoListFilter(\"all\", props.id)}*/\r\n                >\r\n                    All\r\n                </Button>\r\n                <Button\r\n                    size={\"small\"}\r\n                    variant={\"outlined\"}\r\n                    color={props.filter === \"active\" ? \"secondary\" : \"primary\"}\r\n                    onClick={createOnClickHandler(\"active\")}\r\n                    style={{margin: \"5px\"}}\r\n                >\r\n                    Active\r\n                </Button>\r\n                <Button\r\n                    size={\"small\"}\r\n                    variant={\"outlined\"}\r\n                    color={props.filter === \"completed\" ? \"secondary\" : \"primary\"}\r\n                    onClick={createOnClickHandler(\"completed\")}\r\n                    style={{margin: \"5px\"}}\r\n                >\r\n                    Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n})\r\n\r\n///----------- type -----------\\\\\\\r\ntype TodoListPropsType = {\r\n    id: string;\r\n    title: string;\r\n    tasks: TaskType[];\r\n    filter: FilterValuesType;\r\n    addTask: (title: string, todolistID: string) => void;\r\n    removeTask: (taskID: string, todolistID: string) => void;\r\n    changeTaskTitle: (\r\n        taskTitle: string,\r\n        title: string,\r\n        todolistID: string\r\n    ) => void;\r\n    changeTaskStatus: (\r\n        taskID: string,\r\n        todolistID: string,\r\n        status: TaskStatuses\r\n    ) => void;\r\n    changeTodoListFilter: (filter: FilterValuesType, todolistID: string) => void;\r\n    changeTodoListTitle: (title: string, todolistID: string) => void;\r\n    removeTodolist: (todolistID: string) => void;\r\n};","import React, {useCallback, useEffect} from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {\r\n    addTodolistTC,\r\n    ChangeTodoListFilterAC,\r\n    ChangeTodoListTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType, removeTodolistTC,\r\n    TodoListDomainType\r\n} from \"./Todolist/todolists-reducer\";\r\nimport {AppRootStateType, useAppDispatch} from \"../../api/store\";\r\nimport {addTaskTC, removeTaskTC, TaskStateType, updateTaskTC} from \"./Todolist/Task/tasks-reducer\";\r\nimport {TaskStatuses} from \"../../api/todolist-api\";\r\nimport {Grid, Paper} from \"@material-ui/core\";\r\nimport {TodoList} from \"./Todolist/Todolist\";\r\nimport {AddItemForm} from \"../../components/AddItemForm/AddItemForm\";\r\n\r\nexport const TodolistsList = () => {\r\n\r\n    const dispatch = useAppDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTodolistsTC())\r\n    }, [])\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodoListDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TaskStateType>(state => state.tasks)\r\n\r\n    ///----------- tasks -----------\\\\\\\r\n    const removeTask = useCallback((taskID: string, todolistID: string) => {\r\n        dispatch(removeTaskTC(taskID, todolistID))\r\n    }, [dispatch]);\r\n    const addTask = useCallback((taskTitle: string, todolistID: string,) => {\r\n        dispatch(addTaskTC(taskTitle, todolistID))\r\n    }, [dispatch]);\r\n    const changeTaskStatus = useCallback((taskID: string, todolistID: string, status: TaskStatuses) => {\r\n        dispatch(updateTaskTC(taskID, todolistID, {status}))\r\n    }, [dispatch]);\r\n    const changeTaskTitle = useCallback((taskID: string, title: string, todolistID: string) => {\r\n        dispatch(updateTaskTC(taskID, todolistID, {title}))\r\n    }, [dispatch]);\r\n\r\n    ///----------- todolists -----------\\\\\\\r\n    const changeTodoListTitle = useCallback((title: string, todolistID: string) => {\r\n        let thunk = ChangeTodoListTitleTC(title, todolistID)\r\n        dispatch(thunk)\r\n    }, [dispatch]);\r\n    const changeTodoListFilter = useCallback((filter: FilterValuesType, todolistID: string) => {\r\n        dispatch(ChangeTodoListFilterAC(todolistID, filter))\r\n    }, [dispatch]);\r\n    const removeTodolist = useCallback((todolistID: string) => {\r\n        let thunk = removeTodolistTC(todolistID)\r\n        dispatch(thunk)\r\n    }, [dispatch]);\r\n    const addTodolist = useCallback((title: string) => {\r\n        let thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch]);\r\n\r\n    const todolistsComponents = todolists.map((tl) => {\r\n        let allTodolistTask = tasks[tl.id]\r\n        return (\r\n            <Grid item key={tl.id}>\r\n                <Paper variant={\"elevation\"} style={{padding: \"20px\"}}>\r\n                    <TodoList\r\n                        id={tl.id}\r\n                        title={tl.title}\r\n                        tasks={allTodolistTask}\r\n                        filter={tl.filter}\r\n                        addTask={addTask}\r\n                        removeTask={removeTask}\r\n                        removeTodolist={removeTodolist}\r\n                        changeTaskStatus={changeTaskStatus}\r\n                        changeTodoListFilter={changeTodoListFilter}\r\n                        changeTaskTitle={changeTaskTitle}\r\n                        changeTodoListTitle={changeTodoListTitle}\r\n                    />\r\n                </Paper>\r\n            </Grid>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <>\r\n            <Grid container style={{padding: \"20px 0\"}}>\r\n                <AddItemForm addItem={addTodolist}/>\r\n            </Grid>\r\n            <Grid container spacing={4}>\r\n                {todolistsComponents}\r\n            </Grid>\r\n        </>\r\n    )\r\n}","import React from \"react\";\r\nimport \"./App.css\";\r\nimport {AppBar, IconButton, Button, Toolbar, Typography, Container} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {TodolistsList} from \"../features/TodolistsList/TodolistsList\";\r\n\r\nfunction App() {\r\n\r\n    return <div className=\"App\">\r\n        <AppBar position={\"static\"} color={\"transparent\"}>\r\n            <Toolbar style={{justifyContent: \"space-between\"}}>\r\n                <IconButton edge={\"start\"} color={\"secondary\"} aria-label={\"menu\"}>\r\n                    <Menu/>\r\n                </IconButton>\r\n                <Typography variant=\"h5\">Todolists</Typography>\r\n                <Button color={\"secondary\"} variant={\"outlined\"}>\r\n                    Login\r\n                </Button>\r\n            </Toolbar>\r\n        </AppBar>\r\n        <Container fixed>\r\n            <TodolistsList/>\r\n        </Container>\r\n    </div>\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport {createTheme, ThemeProvider} from \"@material-ui/core\";\r\nimport {indigo, pink} from \"@material-ui/core/colors\";\r\nimport App from \"./app/App\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./api/store\";\r\n\r\nconst theme = createTheme({\r\n    palette: {\r\n        primary: indigo,\r\n        secondary: pink,\r\n        type: \"light\",\r\n    },\r\n});\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <ThemeProvider theme={theme}>\r\n            <App/>\r\n        </ThemeProvider>\r\n    </Provider>, document.getElementById(\"root\")\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}