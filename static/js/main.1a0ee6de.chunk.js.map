{"version":3,"sources":["components/Error/Error404.module.css","serviceWorker.ts","api/todolist-api.ts","app/app-reducer.ts","utils/error-utils.ts","features/TodolistsList/Todolist/todolists-reducer.ts","features/TodolistsList/Todolist/Task/tasks-reducer.ts","features/Login/auth-reducer.ts","api/store.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","components/Error/Error404.tsx","app/App.tsx","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","ResultCode","ROUTS","instance","axios","create","baseURL","withCredentials","headers","todolistAPI","get","title","post","todolistId","delete","put","todolistID","taskID","model","authAPI","data","initialState","isInitialized","status","error","setAppStatusAC","type","setAppErrorAC","value","handleServerAppError","dispatch","messages","length","handleServerNetWorkError","message","changeTodolistEntityStatusAC","id","removeTaskAC","updateTaskTC","domainModel","getState","task","tasks","find","t","apiModel","deadline","startDate","description","priority","then","res","resultCode","updateTaskAC","catch","finally","isLoggedIn","setIsLoggedInAC","rootReducer","combineReducers","state","action","filter","todoListId","map","todolist","copyState","stateCopy","todolists","forEach","tl","entityStatus","el","app","auth","store","legacy_createStore","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","AddItemForm","memo","addItem","disabled","React","useState","setTitle","setError","onClickAddItem","trimmedTitle","trim","TextField","variant","size","onChange","e","currentTarget","onKeyDown","key","label","helperText","IconButton","color","AddOutlined","onClick","EditableSpan","changeTitle","text","setText","editMode","setEditMode","offEditMode","onBlur","autoFocus","onDoubleClick","Task","removeTask","changeTaskStatus","changeTaskTitle","onClickHandler","useCallback","onChangeHandler","newIsDoneValue","checked","Completed","New","onTitleChangeHandler","newValue","ListItem","className","alignItems","disableGutters","divider","Checkbox","DeleteOutlineOutlined","TodoList","props","useEffect","items","setTaskAC","tasksForTodolist","createOnClickHandler","changeTodoListFilter","addTask","taskJSX","todolistTitle","changeTodoListTitle","removeTodolist","List","style","listStyle","Button","margin","TodolistsList","a","err","isAxiosError","response","removeTaskTC","taskTitle","OK","item","addTaskTC","ChangeTodoListTitleAC","ChangeTodoListTitleTC","ChangeTodoListFilterAC","removeTodolistTC","addTodolist","addTodolistTC","todolistsComponents","allTodolistTask","Grid","Paper","padding","container","spacing","to","LOGIN","Alert","ref","elevation","ErrorSnackbar","handleClose","event","reason","Stack","sx","width","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","initialValues","email","password","rememberMe","captcha","validate","values","errors","test","onSubmit","resetForm","DEFAULT","justifyContent","handleSubmit","FormControl","FormLabel","href","target","FormGroup","getFieldProps","touched","FormControlLabel","control","Error404","styles","App","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","path","element","top","textAlign","CircularProgress","theme","createTheme","palette","primary","indigo","secondary","pink","ReactDOM","render","ThemeProvider","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.1a0ee6de.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"Error404_error__3j-Z2\"};","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won\"t work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let\"s check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It\"s the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can\"t reload the page.\r\n  fetch(swUrl, {\r\n    headers: { \"Service-Worker\": \"script\" }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import axios, {AxiosResponse} from \"axios\"\r\nimport {LoginDataType} from \"../features/Login/Login\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.1/\",\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": \"9c1a69da-f1af-40a7-806f-4d3b095c12b8\",\r\n    }\r\n})\r\n\r\n///----------- api -----------\\\\\\\r\nexport const todolistAPI = {\r\n    getTodolist() {\r\n        return instance.get<TodoListType[]>(\"todo-lists\")\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<ResponseType<{ item: TodoListType }>>(\"todo-lists\", {title: title})\r\n    },\r\n    deleteTodolist(todolistId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}`)\r\n    },\r\n    updateTodolist(todolistId: string, title: string) {\r\n        return instance.put<ResponseType<{ title: string }>>(\r\n            `todo-lists/${todolistId}`,\r\n            {title: title})\r\n    },\r\n    getTasks(todolistID: string) {\r\n        return instance.get<GetTasksResponse>(\r\n            `todo-lists/${todolistID}/tasks`)\r\n    },\r\n    createTasks(todolistID: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: CreateTaskType }>>>(`todo-lists/${todolistID}/tasks`, {title});\r\n    },\r\n    deleteTasks(taskID: string, todolistID: string) {\r\n        return instance.delete<ResponseType>(\r\n            `todo-lists/${todolistID}/tasks/${taskID}`)\r\n    },\r\n    updateTasks(todolistID: string, taskID: string, model: UpdateTasksModelType) {\r\n        return instance.put<ResponseType>(\r\n            `todo-lists/${todolistID}/tasks/${taskID}`, model)\r\n    }\r\n}\r\nexport const authAPI = {\r\n    login(data: LoginDataType) {\r\n        return instance.post<LoginDataType, AxiosResponse<ResponseType<{ userId: string }>>>(`auth/login`, data);\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<AuthMeResponseType>>(`auth/me`)\r\n    },\r\n    logOut() {\r\n        return instance.delete<ResponseType>(`auth/login`)\r\n    }\r\n}\r\n\r\n///----------- types -----------\\\\\\\r\nexport type ResponseType<T = {}> = {\r\n    resultCode: number,\r\n    messages: string[],\r\n    fieldsErrors: string[],\r\n    data: T\r\n}\r\nexport type TodoListType = {\r\n    id: string,\r\n    addedDate: string,\r\n    order: number,\r\n    title: string\r\n}\r\nexport type AuthMeResponseType = {\r\n    id: number,\r\n    email: string,\r\n    login: string\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport enum ResultCode {\r\n    OK = 0,\r\n    ERROR = 1,\r\n    CAPTCHA = 10\r\n}\r\n\r\nexport enum ROUTS {\r\n    DEFAULT = \"/\",\r\n    LOGIN = \"login\",\r\n    NOT_FOUND = \"404\"\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities,\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todolistId: string\r\n    order: number\r\n    addedData: string\r\n}\r\nexport type CreateTaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities,\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedData: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\nexport type UpdateTasksModelType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\n","export type RequestStatusType = \"idle\" | \"loading\" | \"succeeded\" | \"failed\"\r\n\r\nconst initialState = {\r\n    isInitialized: false,\r\n    status: \"loading\" as RequestStatusType,\r\n    error: null as null | string\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"APP/SET-STATUS\":\r\n            return {...state, status: action.status}\r\n        case \"APP/SET-ERROR\":\r\n            return {...state, error: action.value}\r\n        case \"APP/SET-IS-INITIALIZED\":\r\n            return {...state, isInitialized: action.isInitialized}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n///----------- action creators -----------\\\\\\\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: \"APP/SET-STATUS\", status} as const)\r\nexport const setAppErrorAC = (value: string | null) => ({type: \"APP/SET-ERROR\", value} as const)\r\nexport const setIsInitializedAppAC = (isInitialized: boolean) =>\r\n    ({type: \"APP/SET-IS-INITIALIZED\", isInitialized} as const)\r\n\r\n///----------- type -----------\\\\\\\r\ntype InitialStateType = typeof initialState\r\nexport type SetAppStatusType = ReturnType<typeof setAppStatusAC>\r\nexport type SetAppErrorType = ReturnType<typeof setAppErrorAC>\r\nexport type SetIsInitializedAppType = ReturnType<typeof setIsInitializedAppAC>\r\ntype ActionsType = SetAppStatusType | SetAppErrorType | SetIsInitializedAppType","import {setAppErrorAC, SetAppErrorType, setAppStatusAC, SetAppStatusType} from \"../app/app-reducer\"\r\nimport {Dispatch} from \"redux\"\r\nimport {ResponseType} from \"../api/todolist-api\";\r\n\r\n\r\n///----------- generic function -----------\\\\\\\r\nexport const handleServerAppError = <T>(dispatch: ErrorUtilsDispatchType, data: ResponseType<T>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC(\"Some error occurred\"))\r\n    }\r\n    dispatch(setAppStatusAC(\"failed\"))\r\n}\r\n\r\nexport const handleServerNetWorkError = (dispatch: ErrorUtilsDispatchType, error: { message: string }) => {\r\n    dispatch(setAppErrorAC(error.message ? error.message : \"Some error occurred\"))\r\n    dispatch(setAppStatusAC(\"failed\"))\r\n}\r\n\r\n///----------- types -----------\\\\\\\r\ntype ErrorUtilsDispatchType = Dispatch<SetAppStatusType | SetAppErrorType>","import {todolistAPI, TodoListType} from \"../../../api/todolist-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {\r\n    RequestStatusType,\r\n    setAppErrorAC,\r\n    SetAppErrorType,\r\n    setAppStatusAC,\r\n    SetAppStatusType\r\n} from \"../../../app/app-reducer\";\r\nimport {AxiosError} from \"axios\";\r\nimport {handleServerAppError, handleServerNetWorkError} from \"../../../utils/error-utils\";\r\n\r\nconst initialState: Array<TodoListDomainType> = []\r\n\r\nexport const todolistsReducer = (\r\n    state: Array<TodoListDomainType> = initialState,\r\n    action: ActionsType\r\n): Array<TodoListDomainType> => {\r\n    switch (action.type) {\r\n        case \"ADD-TODOLIST\":\r\n            return [{...action.todolist, filter: \"all\", entityStatus: \"idle\"}, ...state];\r\n        case \"REMOVE-TODOLIST\":\r\n            return state.filter((tl) => tl.id !== action.id);\r\n        case \"CHANGE-TODOLIST-FILTER\":\r\n            return state.map((tl) =>\r\n                tl.id === action.id ? {...tl, filter: action.filter} : tl\r\n            );\r\n        case \"CHANGE-TODOLIST-TITLE\":\r\n            return state.map((tl) =>\r\n                tl.id === action.id ? {...tl, title: action.title} : tl\r\n            );\r\n        case \"SET-TODOLISTS\":\r\n            return action.todolists.map(el => ({...el, filter: \"all\", entityStatus: \"idle\"}))\r\n        case \"SET-ENTITY-STATUS\":\r\n            return state.map((tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl))\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n///----------- action creators -----------\\\\\\\r\nexport const RemoveTodoListAC = (id: string) => ({type: \"REMOVE-TODOLIST\", id,} as const);\r\nexport const AddTodoListAC = (todolist: TodoListType) => ({type: \"ADD-TODOLIST\", todolist} as const);\r\nexport const ChangeTodoListTitleAC = (title: string, id: string) => ({\r\n    type: \"CHANGE-TODOLIST-TITLE\",\r\n    id,\r\n    title,\r\n} as const);\r\nexport const ChangeTodoListFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: \"CHANGE-TODOLIST-FILTER\",\r\n    id,\r\n    filter,\r\n} as const);\r\nexport const setTodolistsAC = (todolists: TodoListType[]) => ({type: \"SET-TODOLISTS\", todolists} as const)\r\nexport const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) => ({\r\n    type: \"SET-ENTITY-STATUS\",\r\n    status,\r\n    id\r\n} as const)\r\n\r\n///----------- thunks creators -----------\\\\\\\r\nexport const fetchTodolistsTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    todolistAPI.getTodolist()\r\n        .then((res) => {\r\n            dispatch(setTodolistsAC(res.data))\r\n            dispatch(setAppStatusAC(\"succeeded\"))\r\n        })\r\n        .catch(() => {\r\n            dispatch(setAppStatusAC(\"failed\"))\r\n        })\r\n}\r\nexport const removeTodolistTC = (todolistID: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    dispatch(changeTodolistEntityStatusAC(todolistID, \"loading\"))\r\n    todolistAPI.deleteTodolist(todolistID)\r\n        .then((res) => {\r\n            dispatch(RemoveTodoListAC(todolistID))\r\n            dispatch(setAppStatusAC(\"succeeded\"))\r\n        })\r\n        .catch((error: AxiosError) => {\r\n            dispatch(changeTodolistEntityStatusAC(todolistID, \"idle\"))\r\n            handleServerNetWorkError(dispatch, error)\r\n        })\r\n        .finally(() => {\r\n            dispatch(setAppStatusAC(\"idle\"))\r\n        })\r\n}\r\nexport const addTodolistTC = (title: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    todolistAPI.createTodolist(title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(AddTodoListAC(res.data.data.item))\r\n            } else {\r\n                handleServerAppError(dispatch, res.data)\r\n            }\r\n        })\r\n        .catch((error: AxiosError) => {\r\n            handleServerNetWorkError(dispatch, error)\r\n        })\r\n}\r\nexport const ChangeTodoListTitleTC = (title: string, id: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    todolistAPI.updateTodolist(id, title).then((res) => {\r\n        dispatch(ChangeTodoListTitleAC(title, id))\r\n        dispatch(setAppStatusAC(\"succeeded\"))\r\n    })\r\n}\r\n\r\n///----------- types -----------\\\\\\\r\nexport type AddTodoListAT = ReturnType<typeof AddTodoListAC>\r\nexport type RemoveTodoListAT = ReturnType<typeof RemoveTodoListAC>\r\nexport type SetTodoListAT = ReturnType<typeof setTodolistsAC>\r\n\r\ntype ActionsType =\r\n    | RemoveTodoListAT\r\n    | AddTodoListAT\r\n    | ReturnType<typeof ChangeTodoListFilterAC>\r\n    | ReturnType<typeof ChangeTodoListTitleAC>\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\n    | SetTodoListAT\r\n    | SetAppStatusType\r\n    | SetAppErrorType\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodoListDomainType = TodoListType & {\r\n    filter: FilterValuesType,\r\n    entityStatus: RequestStatusType\r\n}","import {AddTodoListAT, RemoveTodoListAT, SetTodoListAT} from \"../todolists-reducer\";\r\nimport {CreateTaskType, ResultCode, TaskType, todolistAPI, UpdateTasksModelType} from \"../../../../api/todolist-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"../../../../api/store\";\r\nimport {setAppErrorAC, SetAppErrorType, setAppStatusAC, SetAppStatusType} from \"../../../../app/app-reducer\";\r\nimport axios, {AxiosError} from \"axios\";\r\nimport {handleServerAppError, handleServerNetWorkError} from \"../../../../utils/error-utils\";\r\n\r\nconst initialState: TaskStateType = {}\r\n\r\nexport const tasksReducer = (\r\n    state = initialState,\r\n    action: ActionsType\r\n): TaskStateType => {\r\n    switch (action.type) {\r\n        case \"REMOVE-TASK\":\r\n            return {\r\n                ...state,\r\n                [action.todolistID]: state[action.todolistID].filter(task => task.id !== action.taskID)\r\n            }\r\n        case \"ADD-TASK\": {\r\n            return {\r\n                ...state,\r\n                [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]\r\n            } as TaskStateType\r\n        }\r\n        case \"UPDATE-TASK\":\r\n            return {\r\n                ...state,\r\n                [action.todolistID]: state[action.todolistID].map(task => task.id === action.taskID ? {\r\n                    ...task,\r\n                    ...action.model\r\n                } : task)\r\n            }\r\n        case \"ADD-TODOLIST\": {\r\n            return {...state, [action.todolist.id]: []}\r\n        }\r\n        case \"REMOVE-TODOLIST\":\r\n            let copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        case \"SET-TASK\":\r\n            return {...state, [action.todolistID]: action.tasks}\r\n        case \"SET-TODOLISTS\": {\r\n            const stateCopy = {...state}\r\n            action.todolists.forEach((tl) => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n            return stateCopy;\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n///----------- action creators -----------\\\\\\\r\nexport const removeTaskAC = (taskID: string, todolistID: string) => ({\r\n    type: \"REMOVE-TASK\",\r\n    taskID,\r\n    todolistID\r\n} as const);\r\nexport const addTaskAC = (task: CreateTaskType) => ({type: \"ADD-TASK\", task} as const);\r\nexport const updateTaskAC = (taskID: string, model: UpdateDomainTasksModelType, todolistID: string) => ({\r\n    type: \"UPDATE-TASK\",\r\n    taskID,\r\n    model,\r\n    todolistID\r\n} as const);\r\nexport const setTaskAC = (tasks: TaskType[], todolistID: string) => ({type: \"SET-TASK\", tasks, todolistID} as const)\r\n\r\n///----------- thunks creators -----------\\\\\\\r\nexport const fetchTasksTC = (todolistID: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    todolistAPI.getTasks(todolistID)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTaskAC(tasks, todolistID))\r\n            dispatch(setAppStatusAC(\"succeeded\"))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskID: string, todolistID: string) => async (dispatch: Dispatch<ActionsType>) => {\r\n    try {\r\n        dispatch(setAppStatusAC(\"loading\"))\r\n        await todolistAPI.deleteTasks(taskID, todolistID)\r\n        dispatch(removeTaskAC(taskID, todolistID))\r\n        dispatch(setAppStatusAC(\"succeeded\"))\r\n    } catch (e) {\r\n        const err = e as Error | AxiosError\r\n        if (axios.isAxiosError(err)) {\r\n            const error = err.response?.data\r\n                ? (err.response.data as (_Error)).error\r\n                : err.message\r\n            dispatch(setAppErrorAC(error))\r\n        }\r\n        dispatch(setAppStatusAC(\"failed\"))\r\n    }\r\n    // .then((res) => {\r\n    //     if (res.data.resultCode === 0) {\r\n    //         dispatch(removeTaskAC(taskID, todolistID))\r\n    //         dispatch(setAppStatusAC(\"succeeded\"))\r\n    //     }\r\n    // })\r\n}\r\nexport const addTaskTC = (taskTitle: string, todolistID: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    todolistAPI.createTasks(todolistID, taskTitle)\r\n        .then((res) => {\r\n            if (res.data.resultCode === ResultCode.OK) {\r\n                dispatch(addTaskAC(res.data.data.item))\r\n                dispatch(setAppStatusAC(\"succeeded\"))\r\n            } else {\r\n                handleServerAppError(dispatch, res.data)\r\n            }\r\n        })\r\n        .catch((error: AxiosError) => {\r\n            handleServerNetWorkError(dispatch, error)\r\n        })\r\n        .finally(() => {\r\n            dispatch(setAppStatusAC(\"idle\"))\r\n        })\r\n}\r\nexport const updateTaskTC = (taskID: string, todolistID: string, domainModel: UpdateDomainTasksModelType) => (dispatch: Dispatch<ActionsType>, getState: () => AppRootStateType) => {\r\n    const task = getState().tasks[todolistID].find((t) => t.id === taskID)\r\n    if (task) {\r\n        const apiModel: UpdateTasksModelType = {\r\n            title: task.title,\r\n            deadline: task.deadline,\r\n            startDate: task.startDate,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            status: task.status,\r\n            ...domainModel\r\n\r\n        }\r\n\r\n        dispatch(setAppStatusAC(\"loading\"))\r\n        todolistAPI.updateTasks(todolistID, taskID, apiModel)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(updateTaskAC(taskID, domainModel, todolistID))\r\n                    dispatch(setAppStatusAC(\"succeeded\"))\r\n                } else {\r\n                    handleServerAppError(dispatch, res.data)\r\n                }\r\n\r\n            })\r\n            .catch((error: AxiosError) => {\r\n                handleServerNetWorkError(dispatch, error)\r\n            })\r\n            .finally(() => {\r\n                dispatch(setAppStatusAC(\"idle\"))\r\n            })\r\n    }\r\n}\r\n\r\n///----------- types -----------\\\\\\\r\nexport type TaskStateType = {\r\n    [todolistID: string]: Array<TaskType>;\r\n};\r\n\r\ntype ActionsType =\r\n    ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodoListAT\r\n    | RemoveTodoListAT\r\n    | SetTodoListAT\r\n    | ReturnType<typeof setTaskAC>\r\n    | SetAppStatusType\r\n    | SetAppErrorType\r\n\r\nexport type UpdateDomainTasksModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: number\r\n    priority?: number\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n\r\ntype _Error = {\r\n    error: string\r\n}","import {Dispatch} from \"redux\"\r\nimport {\r\n    SetAppErrorType,\r\n    setAppStatusAC,\r\n    SetAppStatusType,\r\n    setIsInitializedAppAC,\r\n    SetIsInitializedAppType\r\n} from '../../app/app-reducer'\r\nimport {LoginDataType} from \"./Login\";\r\nimport {authAPI, ResultCode} from \"../../api/todolist-api\";\r\nimport {handleServerAppError, handleServerNetWorkError} from \"../../utils/error-utils\";\r\n\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"login/SET-IS-LOGGED-IN\":\r\n            return {...state, isLoggedIn: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n///----------- actions creators -----------\\\\\\\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n    ({type: \"login/SET-IS-LOGGED-IN\", value} as const)\r\n\r\n///----------- thunks creators -----------\\\\\\\r\nexport const loginTC = (data: LoginDataType) => async (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    try {\r\n        const response = await authAPI.login(data)\r\n        if (response.data.resultCode === ResultCode.OK) {\r\n            dispatch(setIsLoggedInAC(true))\r\n            dispatch(setAppStatusAC(\"succeeded\"))\r\n        } else {\r\n            handleServerAppError(dispatch, response.data)\r\n        }\r\n    } catch (e) {\r\n        handleServerNetWorkError(dispatch, e as { message: string })\r\n    }\r\n}\r\nexport const initializeAppTC = () => async (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    try {\r\n        const response = await authAPI.me()\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC(true));\r\n            dispatch(setAppStatusAC(\"succeeded\"))\r\n        } else {\r\n            handleServerAppError(dispatch, response.data)\r\n        }\r\n    } catch (e) {\r\n        handleServerNetWorkError(dispatch, e as { message: string })\r\n    } finally {\r\n        dispatch(setIsInitializedAppAC(true));\r\n    }\r\n\r\n}\r\nexport const logOutTC = () => async (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    try {\r\n        const response = await authAPI.logOut()\r\n        if (response.data.resultCode === ResultCode.OK) {\r\n            dispatch(setIsLoggedInAC(false));\r\n            dispatch(setAppStatusAC(\"succeeded\"))\r\n        } else {\r\n            handleServerAppError(dispatch, response.data)\r\n        }\r\n    } catch (e) {\r\n        handleServerNetWorkError(dispatch, e as { message: string })\r\n    }\r\n\r\n}\r\n\r\n///----------- type -----------\\\\\\\r\ntype ActionsType = ReturnType<typeof setIsLoggedInAC> | SetAppStatusType | SetAppErrorType | SetIsInitializedAppType","import {tasksReducer} from \"../features/TodolistsList/Todolist/Task/tasks-reducer\";\r\nimport {todolistsReducer} from \"../features/TodolistsList/Todolist/todolists-reducer\";\r\nimport {AnyAction, applyMiddleware, combineReducers, legacy_createStore} from \"redux\";\r\nimport thunk, {ThunkDispatch} from \"redux-thunk\"\r\nimport {TypedUseSelectorHook, useDispatch, useSelector} from \"react-redux\";\r\nimport {appReducer} from \"../app/app-reducer\";\r\nimport {authReducer} from \"../features/Login/auth-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n\r\nexport const store = legacy_createStore(rootReducer, applyMiddleware(thunk));\r\nexport const useAppDispatch = () => useDispatch<AppDispatchType>()\r\nexport const useAppSelector: TypedUseSelectorHook<AppRootStateType> = useSelector\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\n///----------- types -----------\\\\\\\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\ntype AppDispatchType = ThunkDispatch<AppRootStateType, void, AnyAction>\r\n\r\n","import {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddOutlined} from \"@material-ui/icons\";\r\nimport React, {ChangeEvent, KeyboardEvent, memo, useState} from \"react\";\r\n\r\nexport const AddItemForm = memo(({addItem, disabled}: AddItemFormPropsType) => {\r\n\r\n    const [title, setTitle] = React.useState<string>(\"\");\r\n    const [error, setError] = useState<boolean>(false);\r\n\r\n    const onChangeSetTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value);\r\n        error && setError(false);\r\n    };\r\n    const onKeyDownAddItem = (e: KeyboardEvent<HTMLInputElement>) =>\r\n        e.key === \"Enter\" && onClickAddItem();\r\n    const onClickAddItem = () => {\r\n        const trimmedTitle = title.trim();\r\n        if (trimmedTitle) {\r\n            addItem(trimmedTitle);\r\n        } else {\r\n            setError(true);\r\n        }\r\n        setTitle(\"\");\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                variant={\"outlined\"}\r\n                size={\"small\"}\r\n                value={title}\r\n                onChange={onChangeSetTitle}\r\n                onKeyDown={onKeyDownAddItem}\r\n                label={\"Add title\"}\r\n                error={error}\r\n                helperText={error && \"Title is required!\"}\r\n                disabled={disabled}\r\n            />\r\n            <IconButton color={\"secondary\"} disabled={disabled}>\r\n                <AddOutlined onClick={onClickAddItem}/>\r\n            </IconButton>\r\n        </div>\r\n    );\r\n});\r\n\r\n///----------- type -----------\\\\\\\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void;\r\n    disabled?: boolean\r\n};","import {TextField} from \"@material-ui/core\";\r\nimport React, {ChangeEvent, useState, KeyboardEvent, memo} from \"react\";\r\n\r\nexport const EditableSpan = memo(({title, changeTitle}: EditableSpanPropsType) => {\r\n\r\n    const [text, setText] = React.useState<string>(title);\r\n    const [editMode, setEditMode] = useState<boolean>(false);\r\n\r\n    const onChangeSetText = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setText(e.currentTarget.value);\r\n    };\r\n    const onKeyDownChangeTitle = (e: KeyboardEvent<HTMLInputElement>) =>\r\n        e.key === \"Enter\" && offEditMode();\r\n    const onEditMode = () => {\r\n        setEditMode(true);\r\n    };\r\n    const offEditMode = () => {\r\n        setEditMode(false);\r\n        changeTitle(text);\r\n    };\r\n\r\n    return editMode ? (\r\n        <TextField\r\n            color={\"primary\"}\r\n            value={text}\r\n            onChange={onChangeSetText}\r\n            onKeyDown={onKeyDownChangeTitle}\r\n            onBlur={offEditMode}\r\n            autoFocus\r\n        />\r\n    ) : (\r\n        <span onDoubleClick={onEditMode}>{title}</span>\r\n    );\r\n});\r\n\r\n///----------- type -----------\\\\\\\r\ntype EditableSpanPropsType = {\r\n    title: string;\r\n    changeTitle: (editedTitle: string) => void;\r\n};","import React, {ChangeEvent, memo, useCallback} from \"react\";\r\nimport {Checkbox, IconButton, ListItem} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"../../../../components/EditableSpan/EditableSpan\";\r\nimport {DeleteOutlineOutlined} from \"@material-ui/icons\";\r\nimport {TaskStatuses, TaskType} from \"../../../../api/todolist-api\";\r\n\r\nexport const Task = memo(({task, todolistID, removeTask, changeTaskStatus, changeTaskTitle}: TaskPropsType) => {\r\n\r\n    const {id, status, title} = {...task}\r\n\r\n    const onClickHandler = useCallback(() => removeTask(task.id, todolistID), [task.id, todolistID, removeTask])\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        changeTaskStatus(id, todolistID, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New,)\r\n    }, [id, todolistID, changeTaskStatus])\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        changeTaskTitle(id, newValue, todolistID)\r\n    }, [id, todolistID, changeTaskTitle])\r\n\r\n    return (\r\n        <ListItem\r\n            key={id}\r\n            className={status === TaskStatuses.Completed ? \"task isDone\" : \"\"}\r\n            alignItems={\"center\"}\r\n            disableGutters={true}\r\n            divider={true}\r\n        >\r\n            <Checkbox\r\n                size={\"small\"}\r\n                color={\"primary\"}\r\n                onChange={onChangeHandler}\r\n                checked={status === TaskStatuses.Completed}\r\n            />\r\n            <EditableSpan title={title} changeTitle={onTitleChangeHandler}/>\r\n            <IconButton>\r\n                <DeleteOutlineOutlined onClick={onClickHandler}/>\r\n            </IconButton>\r\n        </ListItem>\r\n    );\r\n});\r\n\r\n///----------- type -----------\\\\\\\r\nexport type TaskPropsType = {\r\n    task: TaskType,\r\n    todolistID: string,\r\n    removeTask: (taskID: string, todolistID: string) => void;\r\n    changeTaskTitle: (taskTitle: string, title: string, todolistID: string) => void;\r\n    changeTaskStatus: (taskID: string, todolistID: string, status: TaskStatuses) => void;\r\n}","import React, {memo, useCallback, useEffect} from \"react\";\r\nimport {AddItemForm} from \"../../../components/AddItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"../../../components/EditableSpan/EditableSpan\";\r\nimport {Button, IconButton, List} from \"@material-ui/core\";\r\nimport {DeleteOutlineOutlined} from \"@material-ui/icons\";\r\nimport {TaskStatuses, TaskType} from \"../../../api/todolist-api\";\r\nimport {FilterValuesType, TodoListDomainType} from \"./todolists-reducer\";\r\nimport {fetchTasksTC} from \"./Task/tasks-reducer\";\r\nimport {useAppDispatch} from \"../../../api/store\";\r\nimport {Task} from \"./Task/Task\";\r\nimport {RequestStatusType} from \"../../../app/app-reducer\";\r\n\r\nexport const TodoList = memo((props: TodoListPropsType) => {\r\n\r\n    const dispatch = useAppDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTasksTC(props.todolist.id))\r\n    }, [])\r\n\r\n    let tasksForTodolist = props.tasks;\r\n\r\n    if (props.todolist.filter === \"active\") {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === \"completed\") {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    const createOnClickHandler = (filter: FilterValuesType) => {\r\n        return () => props.changeTodoListFilter(filter, props.todolist.id);\r\n    };\r\n    const addTask = useCallback((title: string) => props.addTask(title, props.todolist.id), [props.addTask, props.todolist.id]);\r\n    const removeTodolist = () => props.removeTodolist(props.todolist.id);\r\n    const changeTodoListTitle = (todolistTitle: string) =>\r\n        props.changeTodoListTitle(todolistTitle, props.todolist.id);\r\n    const taskJSX = tasksForTodolist.length ?\r\n        tasksForTodolist.map(t => <Task key={t.id} task={t} todolistID={props.todolist.id} removeTask={props.removeTask}\r\n                                        changeTaskTitle={props.changeTaskTitle}\r\n                                        changeTaskStatus={props.changeTaskStatus}\r\n        />) : <span>I\"m empty! Fill me up! <b>㋡</b></span>\r\n\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditableSpan title={props.todolist.title} changeTitle={changeTodoListTitle}/>\r\n                <IconButton disabled={props.entityStatus === \"loading\"}>\r\n                    <DeleteOutlineOutlined color={\"primary\"} onClick={removeTodolist}/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addTask} disabled={props.entityStatus === \"loading\"}/>\r\n            <List style={{listStyle: \"none\"}}>\r\n                {taskJSX}\r\n            </List>\r\n            <div>\r\n                <Button\r\n                    size={\"small\"}\r\n                    variant={\"outlined\"}\r\n                    color={props.todolist.filter === \"all\" ? \"secondary\" : \"primary\"}\r\n                    onClick={createOnClickHandler(\"all\")}\r\n                    style={{margin: \"5px\"}}\r\n                    /* onClick={() => props.changeTodoListFilter(\"all\", props.id)}*/\r\n                >\r\n                    All\r\n                </Button>\r\n                <Button\r\n                    size={\"small\"}\r\n                    variant={\"outlined\"}\r\n                    color={props.todolist.filter === \"active\" ? \"secondary\" : \"primary\"}\r\n                    onClick={createOnClickHandler(\"active\")}\r\n                    style={{margin: \"5px\"}}\r\n                >\r\n                    Active\r\n                </Button>\r\n                <Button\r\n                    size={\"small\"}\r\n                    variant={\"outlined\"}\r\n                    color={props.todolist.filter === \"completed\" ? \"secondary\" : \"primary\"}\r\n                    onClick={createOnClickHandler(\"completed\")}\r\n                    style={{margin: \"5px\"}}\r\n                >\r\n                    Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n})\r\n\r\n///----------- type -----------\\\\\\\r\ntype TodoListPropsType = {\r\n    todolist: TodoListDomainType,\r\n    tasks: TaskType[];\r\n    addTask: (title: string, todolistID: string) => void;\r\n    removeTask: (taskID: string, todolistID: string) => void;\r\n    changeTaskTitle: (\r\n        taskTitle: string,\r\n        title: string,\r\n        todolistID: string\r\n    ) => void;\r\n    changeTaskStatus: (\r\n        taskID: string,\r\n        todolistID: string,\r\n        status: TaskStatuses\r\n    ) => void;\r\n    changeTodoListFilter: (filter: FilterValuesType, todolistID: string) => void;\r\n    changeTodoListTitle: (title: string, todolistID: string) => void;\r\n    removeTodolist: (todolistID: string) => void;\r\n    entityStatus: RequestStatusType\r\n};","import React, {useCallback, useEffect} from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {\r\n    addTodolistTC,\r\n    ChangeTodoListFilterAC,\r\n    ChangeTodoListTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType, removeTodolistTC,\r\n    TodoListDomainType\r\n} from \"./Todolist/todolists-reducer\";\r\nimport {AppRootStateType, useAppDispatch} from \"../../api/store\";\r\nimport {addTaskTC, removeTaskTC, TaskStateType, updateTaskTC} from \"./Todolist/Task/tasks-reducer\";\r\nimport {ROUTS, TaskStatuses} from \"../../api/todolist-api\";\r\nimport {Grid, Paper} from \"@material-ui/core\";\r\nimport {TodoList} from \"./Todolist/Todolist\";\r\nimport {AddItemForm} from \"../../components/AddItemForm/AddItemForm\";\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\nexport const TodolistsList = () => {\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodoListDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TaskStateType>(state => state.tasks)\r\n    const dispatch = useAppDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    useEffect(() => {\r\n        if (!isLoggedIn) {\r\n            return\r\n        }\r\n        dispatch(fetchTodolistsTC())\r\n    }, [])\r\n\r\n    ///----------- tasks -----------\\\\\\\r\n    const removeTask = useCallback((taskID: string, todolistID: string) => {\r\n        dispatch(removeTaskTC(taskID, todolistID))\r\n    }, [dispatch]);\r\n    const addTask = useCallback((taskTitle: string, todolistID: string,) => {\r\n        dispatch(addTaskTC(taskTitle, todolistID))\r\n    }, [dispatch]);\r\n    const changeTaskStatus = useCallback((taskID: string, todolistID: string, status: TaskStatuses) => {\r\n        dispatch(updateTaskTC(taskID, todolistID, {status}))\r\n    }, [dispatch]);\r\n    const changeTaskTitle = useCallback((taskID: string, title: string, todolistID: string) => {\r\n        dispatch(updateTaskTC(taskID, todolistID, {title}))\r\n    }, [dispatch]);\r\n\r\n    ///----------- todolists -----------\\\\\\\r\n    const changeTodoListTitle = useCallback((title: string, todolistID: string) => {\r\n        let thunk = ChangeTodoListTitleTC(title, todolistID)\r\n        dispatch(thunk)\r\n    }, [dispatch]);\r\n    const changeTodoListFilter = useCallback((filter: FilterValuesType, todolistID: string) => {\r\n        dispatch(ChangeTodoListFilterAC(todolistID, filter))\r\n    }, [dispatch]);\r\n    const removeTodolist = useCallback((todolistID: string) => {\r\n        let thunk = removeTodolistTC(todolistID)\r\n        dispatch(thunk)\r\n    }, [dispatch]);\r\n    const addTodolist = useCallback((title: string) => {\r\n        let thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch]);\r\n\r\n    const todolistsComponents = todolists.map((tl) => {\r\n        let allTodolistTask = tasks[tl.id]\r\n        return (\r\n            <Grid item key={tl.id}>\r\n                <Paper variant={\"elevation\"} style={{padding: \"20px\"}}>\r\n                    <TodoList\r\n                        todolist={tl}\r\n                        tasks={allTodolistTask}\r\n                        entityStatus={tl.entityStatus}\r\n                        addTask={addTask}\r\n                        removeTask={removeTask}\r\n                        removeTodolist={removeTodolist}\r\n                        changeTaskStatus={changeTaskStatus}\r\n                        changeTodoListFilter={changeTodoListFilter}\r\n                        changeTaskTitle={changeTaskTitle}\r\n                        changeTodoListTitle={changeTodoListTitle}\r\n                    />\r\n                </Paper>\r\n            </Grid>\r\n        );\r\n    });\r\n\r\n    if (!isLoggedIn) {\r\n        return <Navigate to={ROUTS.LOGIN}/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Grid container style={{padding: \"20px 0\"}}>\r\n                <AddItemForm addItem={addTodolist}/>\r\n            </Grid>\r\n            <Grid container spacing={4}>\r\n                {todolistsComponents}\r\n            </Grid>\r\n        </>\r\n    )\r\n}","import * as React from 'react';\r\nimport Stack from '@mui/material/Stack';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@mui/material/Alert';\r\nimport {useAppSelector} from \"../../api/store\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {setAppErrorAC} from \"../../app/app-reducer\";\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props,\r\n    ref,\r\n) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"standard\" {...props} />;\r\n});\r\n\r\nexport default function ErrorSnackbar() {\r\n\r\n    const dispatch = useDispatch()\r\n    const error = useAppSelector<string | null>(state => state.app.error)\r\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Stack spacing={2} sx={{width: '100%'}}>\r\n                <Snackbar open={!!error} autoHideDuration={6000} onClose={handleClose}>\r\n                    <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                        {error}😠\r\n                    </Alert>\r\n                </Snackbar>\r\n            </Stack></div>\r\n    );\r\n}\r\n","import React, {useEffect} from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {useFormik} from \"formik\";\r\nimport {AppRootStateType, useAppDispatch} from \"../../api/store\";\r\nimport {loginTC} from \"./auth-reducer\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {ROUTS} from \"../../api/todolist-api\";\r\nimport {setAppStatusAC} from \"../../app/app-reducer\";\r\n\r\nexport const Login = () => {\r\n\r\n    const dispatch = useAppDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    useEffect(() => {\r\n        dispatch(setAppStatusAC(\"succeeded\"))\r\n    }, [])\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: \"\",\r\n            password: \"\",\r\n            rememberMe: false,\r\n            captcha: \"\"\r\n        },\r\n        validate: (values: LoginDataType) => {\r\n            const errors: FormikErrorType = {}\r\n            if (!values.email) {\r\n                errors.email = 'Required'\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address ⚠'\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Required'\r\n            } else if (values.password.length < 3) {\r\n                errors.password = \"Password should be more 3 symbols ⚠\"\r\n            }\r\n            return errors\r\n        },\r\n        onSubmit: (values: LoginDataType) => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Navigate to={ROUTS.DEFAULT}/>\r\n    }\r\n\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}> here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField {...formik.getFieldProps(\"email\")}\r\n                                   label=\"Email\"\r\n                                   margin=\"normal\"/>\r\n                        {formik.errors.email &&\r\n                            <div style={{color: \"red\"}}>\r\n                                {formik.touched.email && formik.errors.email}\r\n                            </div>}\r\n                        <TextField {...formik.getFieldProps(\"password\")}\r\n                                   type=\"password\"\r\n                                   label=\"Password\"\r\n                                   margin=\"normal\"\r\n\r\n                        />\r\n                        {formik.touched.password && formik.errors.password &&\r\n                            <div style={{color: \"red\"}}>\r\n                                {formik.errors.password}\r\n                            </div>}\r\n                        <FormControlLabel label={'Remember me'}\r\n                                          control={<Checkbox {...formik.getFieldProps(\"rememberMe\")}\r\n                                                             checked={formik.values.rememberMe}/>}\r\n                        />\r\n                        <Button type={'submit'} color={\"secondary\"} variant={\"outlined\"}>\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n\r\n///----------- type -----------\\\\\\\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n}\r\nexport type LoginDataType = {\r\n    email: string\r\n    password: string,\r\n    rememberMe: boolean,\r\n    captcha: string\r\n}","import React, {useEffect} from \"react\";\r\nimport styles from \"./Error404.module.css\"\r\nimport {useAppDispatch} from \"../../api/store\";\r\nimport {setAppStatusAC} from \"../../app/app-reducer\";\r\n\r\nexport function Error404() {\r\n\r\n    const dispatch = useAppDispatch()\r\n    useEffect(() => {\r\n        dispatch(setAppStatusAC(\"succeeded\"))\r\n    }, [])\r\n\r\n    return (\r\n        <div className={styles.error}>\r\n            <h1>404</h1>\r\n            <h2>OOPS! PAGE NOT FOUND!</h2>\r\n        </div>\r\n    );\r\n}\r\n","import React, {useEffect} from \"react\";\r\nimport \"./App.css\";\r\nimport {AppBar, IconButton, Button, Toolbar, Typography, Container, LinearProgress} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {TodolistsList} from \"../features/TodolistsList/TodolistsList\";\r\nimport {RequestStatusType} from \"./app-reducer\";\r\nimport {AppRootStateType, useAppDispatch, useAppSelector} from \"../api/store\";\r\nimport ErrorSnackbar from \"../components/ErrorSnackbar/ErrorSnackbar\";\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {Navigate, Route, Routes} from \"react-router-dom\";\r\nimport {Error404} from \"../components/Error/Error404\";\r\nimport {initializeAppTC, logOutTC} from \"../features/Login/auth-reducer\";\r\nimport {CircularProgress} from \"@mui/material\";\r\nimport {useSelector} from \"react-redux\";\r\n\r\nfunction App() {\r\n    const status = useAppSelector<RequestStatusType>(state => state.app.status)\r\n    const dispatch = useAppDispatch()\r\n    const isInitialized = useAppSelector((state => state.app.isInitialized))\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const logOut = () => {\r\n        dispatch(logOutTC())\r\n    }\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress color={\"secondary\"}/>\r\n        </div>\r\n    }\r\n\r\n    return <div className=\"App\">\r\n        <ErrorSnackbar/>\r\n        <AppBar position={\"static\"} color={\"transparent\"}>\r\n            <Toolbar style={{justifyContent: \"space-between\"}}>\r\n                <IconButton edge={\"start\"} color={\"secondary\"} aria-label={\"menu\"}>\r\n                    <Menu/>\r\n                </IconButton>\r\n                <Typography variant=\"h5\">Todolists</Typography>\r\n                {isLoggedIn && <Button onClick={logOut} color={\"secondary\"} variant={\"outlined\"} >Log out</Button>}\r\n            </Toolbar>\r\n            {status === \"loading\" && <LinearProgress color={\"secondary\"}/>}\r\n        </AppBar>\r\n        <Container fixed>\r\n            <Routes>\r\n                <Route path={\"/\"} element={<TodolistsList/>}/>\r\n                <Route path={\"login\"} element={<Login/>}/>\r\n\r\n                <Route path={\"*\"} element={<Navigate to={\"/404\"}/>}/>\r\n                <Route path={\"/404\"} element={<Error404/>}/>\r\n            </Routes>\r\n        </Container>\r\n    </div>\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport {createTheme, ThemeProvider} from \"@material-ui/core\";\r\nimport {indigo, pink} from \"@material-ui/core/colors\";\r\nimport App from \"./app/App\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./api/store\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\n\r\nconst theme = createTheme({\r\n    palette: {\r\n        primary: indigo,\r\n        secondary: pink,\r\n        type: \"light\",\r\n    },\r\n});\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <ThemeProvider theme={theme}>\r\n            <BrowserRouter>\r\n                <App/>\r\n            </BrowserRouter>\r\n        </ThemeProvider>\r\n    </Provider>, document.getElementById(\"root\")\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}